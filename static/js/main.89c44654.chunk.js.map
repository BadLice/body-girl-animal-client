{"version":3,"sources":["components/navbar.gamelist.jsx","components/game.list.jsx","components/dropdown.score.jsx","components/user.input.jsx","components/confirm.button.jsx","components/hand.jsx","components/hands.jsx","components/total.row.jsx","components/navbar.game.jsx","App.js","serviceWorker.js","index.js"],"names":["props","usernameRef","useRef","Navbar","className","bg","variant","Form","inline","InputGroup","onChange","setUsernameSaved","current","value","trim","Prepend","Text","id","role","aria-label","FormControl","ref","placeholder","aria-describedby","defaultValue","username","Button","onClick","saveUsername","disabled","usernameSaved","type","games","useGames","connection","map","game","Card","key","border","Body","Title","name","users","user","i","length","gameId","emit","on","success","setGameId","useState","setGames","useEffect","data","toggle","handState","DropdownButton","onSelect","setInputScore","handId","inputIndex","as","title","Dropdown","Item","eventKey","inputRef","size","state","index","input","score","onBlur","setInputValue","button","hand","confirmHand","submitHand","handTotalScore","inputs","reduce","tot","character","j","hands","totalScore","Alert","useColumns","columns","setColumns","concat","useHands","userId","setHands","useSocketConnection","server","setCookie","setUsername","socket","setSocket","s","socketIOClient","Object","keys","constructor","maxAge","Boolean","window","location","hostname","match","ReactDOM","render","useCookies","Table","striped","bordered","hover","responsive","c","handIndex","findIndex","h","Number","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.89c44654.chunk.js","sourcesContent":["\r\nimport React, { useRef } from 'react';\r\nimport { Button, Navbar, Form, InputGroup, FormControl } from 'react-bootstrap';\r\n\r\nexport default props => {\r\n    let usernameRef = useRef();\r\n    return (\r\n        <>\r\n            <Navbar className=\"bg-light justify-content-between\" bg=\"dark\" variant=\"dark\">\r\n                <Form inline>\r\n                    <InputGroup className=\"mr-sm-2\" onChange={() => props.setUsernameSaved(usernameRef.current.value.trim() === '')}>\r\n                        <InputGroup.Prepend>\r\n                            <InputGroup.Text id=\"basic-addon1\">\r\n                                <span role=\"img\" aria-label=\"user-avatar-icon\">\r\n                                    ğŸ‘¤\r\n                                    </span>\r\n                            </InputGroup.Text>\r\n                        </InputGroup.Prepend>\r\n                        <FormControl\r\n                            ref={usernameRef}\r\n                            placeholder=\"Username\"\r\n                            aria-label=\"Username\"\r\n                            aria-describedby=\"basic-addon1\"\r\n                            defaultValue={props.username}\r\n                        />\r\n                    </InputGroup>\r\n                    <Button onClick={() => props.saveUsername(usernameRef.current.value.trim())} disabled={props.usernameSaved}>Save</Button>\r\n                </Form>\r\n                <Form inline>\r\n                    <FormControl type=\"text\" placeholder=\"Type ID or name...\" className=\" mr-sm-2\" />\r\n                    <Button type=\"submit\">Search</Button>\r\n                </Form>\r\n            </Navbar>\r\n        </>\r\n    );\r\n}","\r\nimport React, { useState, useEffect } from 'react';\r\nimport { Card, Button } from 'react-bootstrap';\r\nimport NavBar from './navbar.gamelist'\r\n\r\nexport default props => {\r\n    let games = useGames(props.connection);\r\n\r\n    let joinGame = (gameId) => {\r\n        props.connection.emit('reqJoinGame', gameId);\r\n\r\n        props.connection.on('getJoinGame', success => {\r\n            success ? props.setGameId(gameId) : props.setGameId(null);\r\n        })\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <NavBar saveUsername={props.saveUsername} setUsernameSaved={props.setUsernameSaved} username={props.username} usernameSaved={props.usernameSaved}/>\r\n            {\r\n                games.map(game =>\r\n                    <Card key={game.id} border=\"primary\" className=\"m-2 game-card\" >\r\n                        <Card.Body>\r\n                            <Card.Title>{game.name}</Card.Title>\r\n                            <Card.Text>\r\n                                <br />\r\n                                <span className=\"border border-dark p-3 mt-3\">\r\n                                    {\r\n                                        game.users.map((user, i) =>\r\n                                            <span key={i}>{user.name}\r\n                                                {i !== game.users.length - 1 ? (<>, </>) : ''}\r\n                                            </span>\r\n                                        )\r\n                                    }\r\n                                </span>\r\n                                <br />\r\n                                <br />\r\n                                <span>\r\n                                    ID:\r\n                                    <span className=\"text-primary m-1\">\r\n                                        {game.id}\r\n                                    </span>\r\n                                </span>\r\n                            </Card.Text>\r\n                            <Button variant=\"primary\" onClick={() => joinGame(game.id)}>Join</Button>\r\n                        </Card.Body>\r\n                    </Card>\r\n                )\r\n            }\r\n        </>\r\n    );\r\n}\r\n\r\nlet useGames = (connection) => {\r\n    let [games, setGames] = useState([]);\r\n\r\n    useEffect(() => {\r\n        if (connection) {\r\n            connection.emit('reqGames');\r\n\r\n            connection.on('getGames', (data) => setGames(data))\r\n        }\r\n    }, [connection]);\r\n\r\n    return games;\r\n}","import React from 'react';\r\nimport { DropdownButton, InputGroup, Dropdown } from 'react-bootstrap';\r\n\r\nexport default props => {\r\n\r\n    let variant = '';\r\n    switch (props.toggle) {\r\n        case 0: variant = 'danger'; break;\r\n        case 5: variant = 'primary'; break;\r\n        case 10: variant = 'success'; break;\r\n        default: variant = 'danger'; break;\r\n    }\r\n\r\n    return (\r\n        props.handState !== 'confirmed' ?\r\n            (\r\n                <InputGroup.Prepend>\r\n                    <InputGroup.Text className={variant}>{props.toggle}</InputGroup.Text>\r\n                </InputGroup.Prepend>\r\n            )\r\n            :\r\n            (\r\n                <DropdownButton\r\n                    disabled={props.disabled} onSelect={value => props.setInputScore(value, props.handId, props.inputIndex)}\r\n                    as={InputGroup.Prepend}\r\n                    variant={variant}\r\n                    title={props.toggle}\r\n                >\r\n                    <Dropdown.Item eventKey={0}>0</Dropdown.Item>\r\n                    <Dropdown.Item eventKey={5}>5</Dropdown.Item>\r\n                    <Dropdown.Item eventKey={10}>10</Dropdown.Item>\r\n                </DropdownButton>\r\n            )\r\n    )\r\n\r\n}\r\n","import React, { useRef } from 'react';\r\nimport Score from './dropdown.score'\r\nimport { InputGroup, FormControl } from 'react-bootstrap';\r\n\r\nexport default props => {\r\n    let inputRef = useRef();\r\n    return (\r\n        <>\r\n            <td className=\"align-middle\">\r\n                <InputGroup size=\"sm\" className=\"mb-3\" >\r\n\r\n                    {\r\n                        props.state !== 'playing' ?\r\n                            (\r\n                                <Score handId={props.handId} inputIndex={props.index} toggle={props.input.score} handState={props.handState} setInputScore={props.setInputScore} />\r\n                            )\r\n                            :\r\n                            ('')\r\n                    }\r\n\r\n\r\n                    <FormControl ref={inputRef} aria-label=\"Small\" aria-describedby=\"inputGroup-sizing-sm\" disabled={props.handState !== 'playing'} defaultValue={props.input.value} onBlur={() => props.setInputValue(inputRef.current.value, props.handId, props.index)} />\r\n                </InputGroup>\r\n                \r\n            </td>\r\n        </>\r\n    );\r\n}\r\n","\r\nimport React from 'react';\r\nimport { Button } from 'react-bootstrap';\r\n\r\nexport default props => {\r\n\r\n    let button;\r\n\r\n    switch (props.hand.state) {\r\n        case 'playing':\r\n            button = (\r\n                <Button variant=\"success\" onClick={() => props.confirmHand(props.hand.id)}>\r\n                    Confirm\r\n                </Button>\r\n            )\r\n            break;\r\n\r\n        case 'waiting':\r\n            button = (\r\n                <Button variant=\"success\" onClick={() => props.confirmHand(props.hand.id)} disabled>\r\n                    Confirmed\r\n                </Button>\r\n            )\r\n            break;\r\n\r\n        case 'confirmed':\r\n            button = (\r\n                <Button variant=\"primary\" onClick={() => props.submitHand(props.hand.id)}>\r\n                    Submit\r\n                </Button>\r\n            )\r\n            break;\r\n\r\n       default:\r\n            button = (\r\n               <h6>Submitted</h6>\r\n            )\r\n            break;\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <td className=\"align-middle\">\r\n                {button}\r\n            </td>\r\n        </>\r\n    );\r\n}\r\n","import React from 'react';\r\nimport UserInput from './user.input'\r\nimport ConfirmButton from './confirm.button'\r\n\r\nexport default props => {\r\n    let handTotalScore = props.hand.inputs.reduce((tot, input) => tot + input.score, 0)\r\n\r\n    return (\r\n        <>\r\n            <td className=\"align-middle\">{props.hand.character}</td>\r\n            {\r\n                props.hand.inputs.map((input, j) =>\r\n                    <UserInput key={j} index={j} handId={props.hand.id} input={input} handState={props.hand.state} setInputScore={props.setInputScore} setInputValue={props.setInputValue} state={props.hand.state}/>\r\n                )\r\n            }\r\n            <ConfirmButton hand={props.hand} confirmHand={props.confirmHand} submitHand={props.submitHand}/>\r\n            <td className=\"align-middle\">{handTotalScore}</td>\r\n        </>\r\n    );\r\n}\r\n","\r\nimport React from 'react';\r\nimport Hand from './hand'\r\n\r\nexport default props => {\r\n\r\n    return (\r\n        <>\r\n            {\r\n                props.hands.map(\r\n                    (hand, i) =>\r\n                        <tr key={i} className=\"text-center align-middle\">\r\n                            <Hand hand={hand} setInputScore={props.setInputScore} setInputValue={props.setInputValue} confirmHand={props.confirmHand} submitHand={props.submitHand}/>\r\n                        </tr>\r\n                )\r\n            }\r\n        </>\r\n    );\r\n}\r\n","import React from 'react';\r\nimport { Alert } from 'react-bootstrap';\r\n\r\nexport default props => {\r\n\r\n    let totalScore = props.hands.reduce((tot, hand) => tot + hand.inputs.reduce((tot, input) => tot + input.score, 0), 0);\r\n\r\n    return (\r\n        <>\r\n            <footer className=\"w-100 p-1 bg-dark text-white fixed-bottom\">\r\n                <Alert variant=\"primary\" className=\"float-right m-0\">\r\n                    {totalScore}\r\n                </Alert>\r\n                <Alert variant=\"none\" className=\"float-right m-0\">\r\n                    TOTAL\r\n                </Alert>\r\n            </footer>\r\n        </>\r\n    );\r\n}\r\n","\r\nimport React from 'react';\r\nimport { Button, Navbar, Form, InputGroup, FormControl } from 'react-bootstrap';\r\n\r\nexport default props => {\r\n    return (\r\n        <>\r\n            <Navbar className=\"justify-content-between\" bg=\"dark\" variant=\"dark\">\r\n                <Form inline>\r\n                    <InputGroup className=\"mr-sm-2\" >\r\n                        <InputGroup.Prepend>\r\n                            <InputGroup.Text id=\"basic-addon1\">\r\n                                <span role=\"img\" aria-label=\"user-avatar-icon\">\r\n                                    ğŸ‘¤\r\n                                    </span>\r\n                            </InputGroup.Text>\r\n                        </InputGroup.Prepend>\r\n                        <FormControl\r\n                            placeholder=\"Username\"\r\n                            aria-label=\"Username\"\r\n                            aria-describedby=\"basic-addon1\"\r\n                            defaultValue={props.username}\r\n                            disabled\r\n                        />\r\n                    </InputGroup>\r\n                </Form>\r\n                <Form inline>\r\n                    <Button variant=\"danger\">Quit game</Button>\r\n                </Form>\r\n            </Navbar>\r\n        </>\r\n    );\r\n}","import 'bootstrap/dist/css/bootstrap.min.css';\nimport React, { useEffect, useState } from 'react';\nimport { Table, Navbar } from 'react-bootstrap';\nimport socketIOClient from \"socket.io-client\";\nimport GameList from './components/game.list';\nimport Hands from './components/hands';\nimport TotalRow from './components/total.row';\nimport { useCookies } from 'react-cookie'\nimport NavbarGame from './components/navbar.game'\n\nexport default () => {\n\n  let server = \"http://worddd.cloudno.de:15519\"\n  const [{ userId }, setCookie, removeCookie] = useCookies(['body-girl-animal-userId']);\n\n  let [usernameSaved, setUsernameSaved] = useState(false);\n  let [username, setUsername] = useState('');\n\n  let connection = useSocketConnection(server, userId, setCookie, setUsername, setUsernameSaved);\n\n  let [gameId, setGameId] = useState(null);\n\n  let [columns, setColumns] = useColumns(gameId, connection);\n  let [hands, setHands] = useHands(gameId, connection, userId);\n\n  let setInputScore = (value, handId, inputIndex) => {\n    let handIndex = hands.findIndex(hand => hand.id === handId)\n    let h = [...hands];\n    h[handIndex].inputs[inputIndex].score = Number(value);\n\n    setHands(h);\n  }\n\n  let setInputValue = (value, handId, inputIndex) => {\n    let handIndex = hands.findIndex(hand => hand.id === handId)\n    let h = [...hands];\n    h[handIndex].inputs[inputIndex].value = value;\n\n    setHands(h);\n  }\n\n  let confirmHand = (handId) => {\n    let handIndex = hands.findIndex(hand => hand.id === handId)\n    let h = [...hands];\n    h[handIndex].state = 'waiting';\n\n    setHands(h);\n  }\n\n  let submitHand = (handId) => {\n    let handIndex = hands.findIndex(hand => hand.id === handId)\n    let h = [...hands];\n    h[handIndex].state = 'submitted';\n\n    setHands(h);\n  }\n\n  let addHand = (newHand) => {\n    let h = [...hands];\n    h.push(newHand);\n\n    setHands(h);\n  }\n\n  let saveUsername = value => {\n    connection.emit('reqSaveUsername', { id: userId, name: value });\n    connection.on('getSaveUsername', success => success && setUsernameSaved(true) && setUsername(value));\n  }\n  return (\n    <>\n      {\n        gameId === null ?\n          (\n            <GameList connection={connection} setGameId={setGameId} setColumns={setColumns} setHands={setHands} saveUsername={saveUsername} usernameSaved={usernameSaved} setUsernameSaved={setUsernameSaved} username={username}/>\n          )\n          :\n          (\n            <>\n              <NavbarGame username={username}/>\n              <Table striped bordered hover responsive variant=\"dark\">\n                <thead>\n                  <tr>\n                    {columns.map((c, i) => <th key={i}>{c}</th>)}\n                  </tr>\n                </thead>\n                <tbody>\n                  <Hands hands={hands} setInputScore={setInputScore} setInputValue={setInputValue} confirmHand={confirmHand} submitHand={submitHand} />\n                </tbody>\n              </Table >\n              <TotalRow columns={columns} hands={hands} />\n            </>\n          )\n      }\n    </>\n  );\n}\n\nlet useColumns = (gameId, connection) => {\n  let [columns, setColumns] = useState([]);\n\n  useEffect(() => {\n    if (connection && gameId) {\n      connection.emit('reqColumns', gameId);\n      connection.on('getColumns', columns => setColumns(columns.concat(['Actions', 'Total'])));\n    }\n  }, [gameId, connection]);\n\n  return [columns, setColumns];\n}\n\nlet useHands = (gameId, connection, userId) => {\n  let [hands, setHands] = useState([]);\n\n  useEffect(() => {\n    if (connection && gameId) {\n      connection.emit('reqHands', { gameId: gameId, userId: userId });\n      connection.on('getHands', hands => setHands(hands));\n    }\n  }, [gameId, connection, userId]);\n\n  return [hands, setHands];\n}\n\nlet useSocketConnection = (server, userId, setCookie, setUsername, setUsernameSaved) => {\n\n  let [socket, setSocket] = useState(null);\n\n  useEffect(() => {\n    const s = socketIOClient(server);\n\n    if (!userId || (Object.keys(userId).length === 0 && userId.constructor === Object)) {\n      s.emit('reqUserId');\n      s.on('getUserId', userId => setCookie('userId', userId, { maxAge: 3600 * 8 }))\n    } else {\n      s.emit('reqUsername', userId);\n      s.on('getUsername', username => {\n        setUsername(username);\n        setUsernameSaved(true);\n      });\n    }\n\n    setSocket(s);\n  }, [server, userId, setCookie, setUsername, setUsernameSaved])\n\n  return socket;\n\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}