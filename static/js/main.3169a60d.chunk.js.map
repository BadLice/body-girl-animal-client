{"version":3,"sources":["components/navbar.gamelist.jsx","components/create.game.modal.jsx","components/game.list.jsx","components/dropdown.score.jsx","components/user.input.jsx","components/confirm.button.jsx","components/hand.jsx","components/hands.jsx","components/total.row.jsx","components/navbar.game.jsx","components/game.loading.jsx","components/game.jsx","App.js","serviceWorker.js","index.js"],"names":["props","usernameRef","useRef","searchRef","submit","e","callback","preventDefault","stopPropagation","Navbar","className","bg","variant","Form","inline","onSubmit","saveUsername","current","value","trim","InputGroup","onChange","setUsernameSaved","Prepend","Text","id","role","aria-label","FormControl","ref","placeholder","aria-describedby","defaultValue","username","Button","onClick","disabled","usernameSaved","setSeatchText","createGame","type","handleClose","connection","emit","setShow","generateField","createRef","useState","fields","setFields","gameNameRef","valid","timer","setTimer","validateField","map","f","tv","isNaN","t","length","Number","Modal","show","onHide","Header","closeButton","Title","Body","FormText","newGameId","isInvalid","onBlur","field","i","key","Control","style","width","setField","splice","removeField","concat","ListGroup","users","user","Item","name","Footer","forEach","defaultTimer","gameId","columns","history","push","games","useGames","searchText","showCreateGameModal","setShowCreateGameModal","setNewGameId","off","on","filter","game","includes","Card","border","setGames","useEffect","data","toggle","handState","DropdownButton","onSelect","setInputScore","handId","inputIndex","as","title","Dropdown","eventKey","inputValid","inputRef","setInputValid","inputOnChange","setInputValue","index","character","v","toUpperCase","charAt","manageInputValid","size","state","input","score","button","hand","confirmHand","submitHand","handTotalScore","inputs","reduce","tot","showSpinner","Spinner","animation","j","hands","totalScore","Alert","scoreBoard","Popover","Content","sort","a","b","textColor","visibility","OverlayTrigger","trigger","placement","overlay","Label","quitGame","Heading","useTimer","success","gameExists","gameStarted","Table","striped","bordered","hover","responsive","c","handIndex","findIndex","h","setHands","handCharacter","useGameExists","setGameExists","useColumns","setColumns","useHands","userId","useSocketConnection","server","setCookie","setUsername","socket","setSocket","s","socketIOClient","Object","keys","constructor","maxAge","useStarted","started","setStarted","res","useQuery","URLSearchParams","useLocation","search","Boolean","window","location","hostname","match","ReactDOM","render","useHistory","useCookies","get","setUsers","path","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.3169a60d.chunk.js","sourcesContent":["\r\nimport React, { useRef } from 'react';\r\nimport { Button, Navbar, Form, InputGroup, FormControl } from 'react-bootstrap';\r\n\r\nexport default props => {\r\n    let usernameRef = useRef();\r\n    let searchRef = useRef();\r\n\r\n    const submit = (e, callback) => {\r\n        e.preventDefault();\r\n        e.stopPropagation();\r\n        if (callback) {\r\n            callback();\r\n        }\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Navbar className=\"bg-light justify-content-between\" bg=\"dark\" variant=\"dark\">\r\n                <Form inline onSubmit={(e) => submit(e, () => props.saveUsername(usernameRef.current.value.trim()))}>\r\n                    <InputGroup className=\"mr-sm-2\" onChange={() => props.setUsernameSaved(usernameRef.current.value.trim() === '')}>\r\n                        <InputGroup.Prepend>\r\n                            <InputGroup.Text id=\"basic-addon1\">\r\n                                <span role=\"img\" aria-label=\"user-avatar-icon\">\r\n                                    👤\r\n                                </span>\r\n                            </InputGroup.Text>\r\n                        </InputGroup.Prepend>\r\n                        <FormControl\r\n                            ref={usernameRef}\r\n                            placeholder=\"Username\"\r\n                            aria-label=\"Username\"\r\n                            aria-describedby=\"basic-addon1\"\r\n                            defaultValue={props.username}\r\n                        />\r\n                    </InputGroup>\r\n                    <Button onClick={() => props.saveUsername(usernameRef.current.value.trim())} disabled={props.usernameSaved}>Save</Button>\r\n                </Form>\r\n                <Form inline onSubmit={(e) => submit(e, () => props.setSeatchText(searchRef.current.value.trim()))}>\r\n                    <Button variant=\"success\" className=\" mr-sm-2\" onClick={() => props.createGame()}>Create game</Button>\r\n                    <FormControl ref={searchRef} type=\"text\" placeholder=\"Type ID or name...\" className=\" mr-sm-2\" />\r\n                    <Button onClick={() => props.setSeatchText(searchRef.current.value.trim())}>Search</Button>\r\n                </Form>\r\n            </Navbar>\r\n        </>\r\n    );\r\n}","import React, { useState, useRef, createRef, useEffect } from 'react';\r\nimport { Modal, Button, Form, FormText, FormControl, ListGroup } from 'react-bootstrap';\r\n\r\nexport default props => {\r\n    const handleClose = () => {\r\n        props.connection.emit('reqQuitGame');\r\n        props.setShow(false);\r\n    }\r\n    const handleShow = () => props.setShow(true);\r\n    const generateField = () => ({ value: '', ref: createRef() });\r\n    const [fields, setFields] = useState([generateField()]);\r\n    const gameNameRef = useRef();\r\n    const [timer, setTimer] = useState({ valid: true, value: 60, ref: createRef() })\r\n\r\n    const submit = (e, callback) => {\r\n        e.preventDefault();\r\n        e.stopPropagation();\r\n        if (callback) {\r\n            callback();\r\n        }\r\n    }\r\n\r\n    const validateField = () => {\r\n        setFields([...fields].map(f => ({ ...f, valid: f.value.trim() !== '' })));\r\n\r\n        let tv = !isNaN(timer.ref.current.value.trim());\r\n        let t = { ...timer }\r\n        t.valid = tv;\r\n        if (tv) {\r\n            t.value = timer.ref.current.value.trim().length === 0 ? 60 : Number(timer.ref.current.value.trim())\r\n        }\r\n        \r\n        setTimer({\r\n            ...timer,\r\n            valid: t.valid,\r\n            value: t.value,\r\n        })\r\n    }\r\n\r\n    const startGame = () => {\r\n        let valid = true;\r\n        fields.forEach(f => valid &= f.valid);\r\n        valid &= timer.valid;\r\n\r\n        if (valid) {\r\n            props.connection.emit('startGame', { defaultTimer: timer.value, gameId: props.newGameId, name: gameNameRef.current.value.trim(), columns: fields.map(f => f.value.trim()) });\r\n            props.history.push(\"/game?id=\" + props.newGameId);\r\n            props.setShow(false);\r\n        }\r\n    }\r\n\r\n    const setField = (i, value) => {\r\n        let f = [...fields];\r\n        f[i].value = f[i].ref.current.value.trim();\r\n        setFields(f);\r\n    }\r\n\r\n    const addField = () => {\r\n        setFields([...fields].concat(generateField()));\r\n    }\r\n\r\n    const removeField = (i) => {\r\n        let f = [...fields];\r\n        f.splice(i, 1);\r\n        setFields(f);\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Modal show={props.show} onHide={handleClose}>\r\n                <Modal.Header closeButton>\r\n                    <Modal.Title>Create a game</Modal.Title>\r\n                </Modal.Header>\r\n                <Modal.Body>\r\n                    <FormText className=\"font-weight-bold\">ID</FormText>\r\n                    <FormText className=\"font-weight-bold text-danger\" variant=\"danger\">{props.newGameId}</FormText>\r\n                </Modal.Body>\r\n\r\n                <Modal.Body>\r\n                    <FormText className=\"font-weight-bold\">Name</FormText>\r\n                    <FormControl type=\"text\" placeholder=\"Game name...\" ref={gameNameRef} />\r\n                </Modal.Body>\r\n\r\n                <Modal.Body>\r\n                    <FormText className=\"font-weight-bold\">Timer</FormText>\r\n                    <FormControl type=\"text\" placeholder=\"60\" ref={timer.ref} isInvalid={!timer.valid} onBlur={validateField} />\r\n                </Modal.Body>\r\n\r\n                <Modal.Body>\r\n                    <FormText className=\"font-weight-bold\">Fields</FormText>\r\n                    {\r\n                        fields.map((field, i) =>\r\n                            <Form key={i} inline className=\" mt-1\" onSubmit={(e) => submit(e)}>\r\n                                <Form.Control isInvalid={!field.valid} ref={field.ref} type=\"text\" placeholder=\"Istert field...\" style={{ width: '80%' }} className=\" mr-sm-1\" onChange={() => setField(i)} value={field.value} onBlur={validateField} />\r\n                                {\r\n                                    fields.length > 1 ?\r\n                                        <Button variant=\"danger\" className=\" mr-sm-1\" onClick={() => removeField(i)}>-</Button>\r\n                                        : ''\r\n                                }\r\n                                {\r\n                                    i === fields.length - 1 ?\r\n                                        <Button variant=\"success\" className=\" mr-sm-1\" onClick={() => addField()}>+</Button>\r\n                                        : ''\r\n                                }\r\n                            </Form>\r\n                        )\r\n                    }\r\n                </Modal.Body>\r\n\r\n                <Modal.Body>\r\n                    <FormText className=\"font-weight-bold\">Users connected</FormText>\r\n                    <ListGroup>\r\n                        {\r\n                            props.users.map((user, i) =>\r\n                                <ListGroup.Item key={i}>{user.name}</ListGroup.Item>\r\n                            )\r\n                        }\r\n                    </ListGroup>\r\n                </Modal.Body>\r\n                <Modal.Footer>\r\n                    <Button variant=\"secondary\" onClick={handleClose}>\r\n                        Close\r\n                    </Button>\r\n                    <Button variant=\"primary\" onClick={startGame}>\r\n                        Start game\r\n                    </Button>\r\n                </Modal.Footer>\r\n            </Modal>\r\n        </>\r\n    );\r\n}","\r\nimport React, { useState, useEffect } from 'react';\r\nimport { Card, Button } from 'react-bootstrap';\r\nimport NavBar from './navbar.gamelist'\r\nimport CreateGameModal from './create.game.modal'\r\nexport default props => {\r\n    let games = useGames(props.connection);\r\n    let [searchText, setSeatchText] = useState('');\r\n    const [showCreateGameModal, setShowCreateGameModal] = useState(false);\r\n    const [newGameId, setNewGameId] = useState(null);\r\n\r\n    const createGame = () => {\r\n        props.connection.emit('reqCreateGame');\r\n        props.connection.off('getCreateGame');\r\n        props.connection.on('getCreateGame', gameId => {\r\n            setNewGameId(gameId);\r\n            setShowCreateGameModal(true)\r\n        });\r\n    }\r\n\r\n    let joinGame = (gameId) => {\r\n        props.history.push(\"/game?id=\" + gameId);\r\n\r\n        \r\n    }\r\n\r\n    let gameFilter = (game) => game.id.includes(searchText) || game.name.includes(searchText);\r\n\r\n    return (\r\n        <>\r\n            <NavBar createGame={createGame} setSeatchText={setSeatchText} saveUsername={props.saveUsername} setUsernameSaved={props.setUsernameSaved} username={props.username} usernameSaved={props.usernameSaved} />\r\n            <CreateGameModal show={showCreateGameModal} newGameId={newGameId} setShow={setShowCreateGameModal} connection={props.connection} history={props.history} users={props.users}/>\r\n            {\r\n                games.filter(gameFilter).map(game =>\r\n                    <Card key={game.id} border=\"primary\" className=\"m-2 game-card\" >\r\n                        <Card.Body>\r\n                            <Card.Title>{game.name}</Card.Title>\r\n                            <Card.Text>\r\n                                <br />\r\n                                <span className=\"border border-dark p-3 mt-3\">\r\n                                    {\r\n                                        game.users.map((user, i) =>\r\n                                            <span key={i}>{user.name}\r\n                                                {i !== game.users.length - 1 ? (<>, </>) : ''}\r\n                                            </span>\r\n                                        )\r\n                                    }\r\n                                </span>\r\n                                <br />\r\n                                <br />\r\n                                <span>\r\n                                    ID:\r\n                                    <span className=\"text-primary m-1\">\r\n                                        {game.id}\r\n                                    </span>\r\n                                </span>\r\n                            </Card.Text>\r\n                            <Button variant=\"primary\" onClick={() => joinGame(game.id)}>Join</Button>\r\n                        </Card.Body>\r\n                    </Card>\r\n                )\r\n            }\r\n        </>\r\n    );\r\n}\r\n\r\nlet useGames = (connection) => {\r\n    let [games, setGames] = useState([]);\r\n\r\n    useEffect(() => {\r\n        if (connection) {\r\n            connection.emit('reqGames');\r\n            connection.on('getGames', (data) => setGames(data))\r\n            return () => {\r\n                connection.off('getCreateGame');\r\n                connection.off('getGames');\r\n            }\r\n        }\r\n    }, [connection]);\r\n\r\n    return games;\r\n}","import React from 'react';\r\nimport { DropdownButton, InputGroup, Dropdown } from 'react-bootstrap';\r\n\r\nexport default props => {\r\n\r\n    let variant = '';\r\n    switch (props.toggle) {\r\n        case 0: variant = 'danger'; break;\r\n        case 5: variant = 'primary'; break;\r\n        case 10: variant = 'success'; break;\r\n        default: variant = 'danger'; break;\r\n    }\r\n    \r\n\r\n    return (\r\n        props.handState !== 'confirmed' ?\r\n            (\r\n                <InputGroup.Prepend>\r\n                    <InputGroup.Text className={variant}>{props.toggle}</InputGroup.Text>\r\n                </InputGroup.Prepend>\r\n            )\r\n            :\r\n            (\r\n                <DropdownButton\r\n                    disabled={props.disabled} onSelect={value => props.setInputScore(value, props.handId, props.inputIndex)}\r\n                    as={InputGroup.Prepend}\r\n                    variant={variant}\r\n                    title={props.toggle}\r\n                >\r\n                    <Dropdown.Item eventKey={0}>0</Dropdown.Item>\r\n                    {\r\n                        props.inputValid ?\r\n                            (\r\n                                <>\r\n                                    <Dropdown.Item eventKey={5}>5</Dropdown.Item>\r\n                                    <Dropdown.Item eventKey={10}>10</Dropdown.Item>\r\n                                </>\r\n                            )\r\n                            : ''\r\n                    }\r\n                </DropdownButton>\r\n            )\r\n    )\r\n\r\n}\r\n","import React, { useRef, useState} from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport Score from './dropdown.score'\r\nimport { InputGroup, FormControl } from 'react-bootstrap';\r\nimport { useEffect } from 'react';\r\n\r\nexport default props => {\r\n    let inputRef = useRef();\r\n\r\n    let [inputValid, setInputValid] = useState(true);\r\n\r\n    let manageInputValid = (value) => {\r\n        let v = value.trim().toUpperCase().charAt(0) === props.character.toUpperCase().charAt(0) || value.length === 0;\r\n        setInputValid(v);\r\n    }\r\n\r\n    let inputOnChange = (value) => {\r\n        props.setInputValue(value, props.handId, props.index, props.character);\r\n        manageInputValid(value);\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (props.handState !== 'playing') {\r\n            let v = inputRef.current.value.trim().toUpperCase().charAt(0) === props.character.toUpperCase().charAt(0);\r\n            setInputValid(v);\r\n\r\n            if (!inputValid) {\r\n                inputRef.current.value = '';\r\n                props.setInputScore(0, props.handId, props.index);\r\n            }\r\n        }\r\n    }, [props.handState, inputValid]);\r\n\r\n\r\n    return (\r\n        <>\r\n            <td className=\"align-middle\">\r\n                <InputGroup size=\"sm\" className=\"mb-3\" >\r\n\r\n                    {\r\n                        props.state !== 'playing' ?\r\n                            (\r\n                                <Score handId={props.handId} inputIndex={props.index} toggle={props.input.score} handState={props.handState} setInputScore={props.setInputScore} inputValid={inputValid}/>\r\n                            )\r\n                            :\r\n                            ('')\r\n                    }\r\n\r\n\r\n                    <FormControl isInvalid={!inputValid} ref={inputRef} aria-label=\"Small\" aria-describedby=\"inputGroup-sizing-sm\" disabled={props.handState !== 'playing'} defaultValue={props.input.value} onChange={() => inputOnChange(inputRef.current.value.trim())} />\r\n                </InputGroup>\r\n\r\n            </td>\r\n        </>\r\n    );\r\n}\r\n","\r\nimport React from 'react';\r\nimport { Button } from 'react-bootstrap';\r\n\r\nexport default props => {\r\n\r\n    let button;\r\n\r\n    switch (props.hand.state) {\r\n        case 'playing':\r\n            button = (\r\n                <Button variant=\"success\" onClick={() => props.confirmHand(props.hand.id)}>\r\n                    Confirm\r\n                </Button>\r\n            )\r\n            break;\r\n\r\n        case 'waiting':\r\n            button = (\r\n                <Button variant=\"success\" onClick={() => props.confirmHand(props.hand.id)} disabled>\r\n                    Confirmed\r\n                </Button>\r\n            )\r\n            break;\r\n\r\n        case 'confirmed':\r\n            button = (\r\n                <Button variant=\"primary\" onClick={() => props.submitHand(props.hand.id)}>\r\n                    Submit\r\n                </Button>\r\n            )\r\n            break;\r\n\r\n       default:\r\n            button = (\r\n               <h6>Submitted</h6>\r\n            )\r\n            break;\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <td className=\"align-middle\">\r\n                {button}\r\n            </td>\r\n        </>\r\n    );\r\n}\r\n","import React from 'react';\r\nimport UserInput from './user.input'\r\nimport ConfirmButton from './confirm.button'\r\nimport { Spinner } from 'react-bootstrap';\r\n\r\nexport default props => {\r\n    let handTotalScore = props.hand.inputs.reduce((tot, input) => tot + input.score, 0)\r\n\r\n    return (\r\n        <>\r\n            <td className=\"align-middle\">\r\n                {\r\n                    props.showSpinner ? \r\n                    <Spinner animation=\"grow\" variant=\"success\" className=\"float-left\"/>\r\n                    : <></>\r\n                }\r\n                {props.hand.character}\r\n                </td>\r\n            {\r\n                props.hand.inputs.map((input, j) =>\r\n                    <UserInput key={j} index={j} handId={props.hand.id} character={props.hand.character} input={input} handState={props.hand.state} setInputScore={props.setInputScore} setInputValue={props.setInputValue} state={props.hand.state}/>\r\n                )\r\n            }\r\n            <ConfirmButton hand={props.hand} confirmHand={props.confirmHand} submitHand={props.submitHand}/>\r\n            <td className=\"align-middle\">{handTotalScore}</td>\r\n        </>\r\n    );\r\n}\r\n","\r\nimport React from 'react';\r\nimport Hand from './hand'\r\n\r\nexport default props => {\r\n\r\n    return (\r\n        <>\r\n            {\r\n                props.hands.map(\r\n                    (hand, i) =>\r\n                        <tr key={i} className=\"text-center align-middle\">\r\n                            <Hand showSpinner={i===props.hands.length-1} hand={hand} setInputScore={props.setInputScore} setInputValue={props.setInputValue} confirmHand={props.confirmHand} submitHand={props.submitHand}/>\r\n                        </tr>\r\n                )\r\n            }\r\n        </>\r\n    );\r\n}\r\n","import React from 'react';\r\nimport { Alert } from 'react-bootstrap';\r\n\r\nexport default props => {\r\n\r\n    let totalScore = props.hands.reduce((tot, hand) => tot + hand.inputs.reduce((tot, input) => tot + input.score, 0), 0);\r\n\r\n    return (\r\n        <>\r\n            <footer className=\"w-100 p-1 bg-dark text-white fixed-bottom\">\r\n                <Alert variant=\"primary\" className=\"float-right m-0\">\r\n                    {totalScore}\r\n                </Alert>\r\n                <Alert variant=\"none\" className=\"float-right m-0\">\r\n                    TOTAL\r\n                </Alert>\r\n            </footer>\r\n        </>\r\n    );\r\n}\r\n","\r\nimport React from 'react';\r\nimport { Button, Navbar, Form, InputGroup, FormControl, Popover, OverlayTrigger, ListGroup } from 'react-bootstrap';\r\n\r\nexport default props => {\r\n\r\n    const sortUsersByScore = (a, b) => a.score > b.score;\r\n\r\n\r\n    const scoreBoard = (\r\n        <Popover id=\"scoreBoard\">\r\n            <Popover.Title as=\"h3\">Scoreboard</Popover.Title>\r\n            <Popover.Content>\r\n                <ListGroup variant=\"flush\">\r\n                    {\r\n                        props.users.sort(sortUsersByScore).map((user, i) => {\r\n                            let textColor = '';\r\n                            switch (i) {\r\n                                case 0: textColor = 'text-success'; break;\r\n                                case 2: textColor = 'text-danger'; break;\r\n                                case 1: textColor = 'text-warning'; break;\r\n                            }\r\n\r\n                            return (\r\n                                <ListGroup.Item key={i}>\r\n                                    <div className=\"row\">\r\n                                        <div className={\"col-xs-6 mr-2 \"}><span style={{ visibility: i === 0 ? 'visible' : 'hidden' }}>&#128081;</span></div>\r\n                                        {/* <div className={\"col-xs-6 mr-2 \"}>{(i + 1)}.</div> */}\r\n                                        <div className={\"col-xs-6 mr-2 \" + textColor}>{user.score}</div>\r\n                                        <div className=\"col-xs-6 \">{user.name}</div>\r\n                                    </div>\r\n\r\n                                </ListGroup.Item>\r\n                            )\r\n                        })\r\n                    }\r\n                </ListGroup>\r\n            </Popover.Content>\r\n        </Popover>\r\n    );\r\n\r\n    // console.log(props.timer);\r\n\r\n    return (\r\n        <>\r\n            <Navbar className=\"justify-content-between\" bg=\"dark\" variant=\"dark\">\r\n                <Form inline>\r\n                    <InputGroup className=\"mr-sm-2\" >\r\n                        <InputGroup.Prepend>\r\n                            <InputGroup.Text id=\"basic-addon1\">\r\n                                <span role=\"img\" aria-label=\"user-avatar-icon\">\r\n                                    👤\r\n                                </span>\r\n                            </InputGroup.Text>\r\n                        </InputGroup.Prepend>\r\n                        <FormControl\r\n                            placeholder=\"Username\"\r\n                            aria-label=\"Username\"\r\n                            aria-describedby=\"basic-addon1\"\r\n                            defaultValue={props.username}\r\n                            disabled\r\n                        />\r\n                    </InputGroup>\r\n\r\n                    <OverlayTrigger trigger=\"click\" placement=\"bottom\" overlay={scoreBoard}>\r\n                        <Button variant=\"info\">&#9776;</Button>\r\n                    </OverlayTrigger>\r\n\r\n                </Form>\r\n                <Form inline>\r\n                    <Form.Label className=\"mr-sm-2 text-warning h4\" >{props.timer}</Form.Label>\r\n                    <Button variant=\"danger\" onClick={() => props.quitGame()}>Quit game</Button>\r\n                </Form>\r\n            </Navbar>\r\n        </>\r\n    );\r\n}","import React from 'react';\r\nimport { ListGroup, Alert, Spinner} from 'react-bootstrap';\r\n\r\nexport default props => {\r\n    return (\r\n        <>\r\n            <Alert variant=\"info\" className=\"m-3\">\r\n                <Alert.Heading>\r\n                    Game is starting ...\r\n                    <Spinner animation=\"grow\" variant=\"danger\" className=\"float-right\" />\r\n                </Alert.Heading>\r\n                <hr />\r\n                <p>\r\n                    Connected users\r\n                </p>\r\n                <ListGroup>\r\n                    {\r\n                        props.users.map((user, i) =>\r\n                            <ListGroup.Item key={i}>{user.name}</ListGroup.Item>\r\n                        )\r\n                    }\r\n                </ListGroup>\r\n            </Alert>\r\n        </>\r\n    )\r\n\r\n}\r\n","import 'bootstrap/dist/css/bootstrap.min.css';\r\nimport React, { useState, useEffect } from 'react';\r\nimport { Table, Alert } from 'react-bootstrap';\r\nimport Hands from './hands';\r\nimport TotalRow from './total.row';\r\nimport NavbarGame from './navbar.game'\r\nimport LoadingGame from './game.loading'\r\n\r\nexport default props => {\r\n    let timer = useTimer(props.connection);\r\n\r\n    useEffect(() => {\r\n        if (props.connection && props.gameId) {\r\n            props.connection.emit('reqJoinGame', props.gameId);\r\n            props.connection.off('getJoinGame');\r\n            props.connection.on('getJoinGame', success => {\r\n                if (success) {\r\n                    props.connection.emit('reqGameStarted', props.gameId);\r\n                }\r\n            })\r\n            return () => props.connection.off('getJoinGame');\r\n        }\r\n    }, [props.connection, props.gameId])\r\n\r\n\r\n    let quitGame = () => {\r\n        props.connection.emit('reqQuitGame');\r\n        props.connection.off('getQuitGame');\r\n        props.connection.on('getQuitGame', () => props.history.push('/'));\r\n    }\r\n\r\n    let setInputScore = (value, handId, inputIndex) => {\r\n        let handIndex = props.hands.findIndex(hand => hand.id === handId)\r\n        let h = [...props.hands];\r\n        h[handIndex].inputs[inputIndex].score = Number(value);\r\n\r\n        props.setHands(h);\r\n    }\r\n\r\n    let setInputValue = (value, handId, inputIndex, handCharacter) => {\r\n        if (value.trim().toUpperCase().charAt(0) === handCharacter.toUpperCase().charAt(0)) {\r\n            let handIndex = props.hands.findIndex(hand => hand.id === handId)\r\n            let h = [...props.hands];\r\n            h[handIndex].inputs[inputIndex].value = value;\r\n    \r\n            props.setHands(h);\r\n        }\r\n    }\r\n\r\n    let confirmHand = (handId) => {\r\n        let handIndex = props.hands.findIndex(hand => hand.id === handId)\r\n        let h = [...props.hands];\r\n        h[handIndex].state = 'waiting';\r\n\r\n        props.setHands(h);\r\n    }\r\n\r\n    let submitHand = (handId) => {\r\n        let handIndex = props.hands.findIndex(hand => hand.id === handId)\r\n        let h = [...props.hands];\r\n        h[handIndex].state = 'submitted';\r\n\r\n        props.setHands(h);\r\n    }\r\n\r\n    if (!props.gameExists) {\r\n        return (\r\n            <>\r\n                <NavbarGame username={props.username} quitGame={quitGame} users={props.users} timer={timer} />\r\n                <Alert variant=\"danger\" className=\"m-3\">\r\n                    <Alert.Heading>ERROR 404</Alert.Heading>\r\n                    <p>\r\n                        Not found\r\n                    </p>\r\n                    <hr />\r\n                    <p className=\"mb-0\">\r\n                        This game does not exists!\r\n                    </p>\r\n                </Alert>\r\n            </>\r\n        );\r\n    }\r\n\r\n    // if(props.hands.length===0) {\r\n    //   return(  <Redirect to=\"/\"/>)\r\n    // }\r\n\r\n    return (\r\n        <>\r\n            <NavbarGame username={props.username} quitGame={quitGame} users={props.users} timer={timer} />\r\n\r\n            {\r\n                props.gameStarted ? (\r\n                    <>\r\n                        <Table striped bordered hover responsive variant=\"dark\">\r\n                            <thead>\r\n                                <tr>\r\n                                    {props.columns.map((c, i) => <th key={i}>{c}</th>)}\r\n                                </tr>\r\n                            </thead>\r\n                            <tbody>\r\n                                <Hands hands={props.hands} setInputScore={setInputScore} setInputValue={setInputValue} confirmHand={confirmHand} submitHand={submitHand} />\r\n                            </tbody>\r\n                        </Table >\r\n                        <TotalRow columns={props.columns} hands={props.hands} />\r\n                    </>\r\n                )\r\n                    :\r\n                    (\r\n                        <LoadingGame users={props.users} />\r\n                    )\r\n            }\r\n\r\n        </>\r\n    )\r\n}\r\n\r\nconst useTimer = (connection) => {\r\n    const [timer, setTimer] = useState('sync...');\r\n\r\n    useEffect(() => {\r\n        if (connection) {\r\n            connection.off('syncTimer');\r\n            connection.on('syncTimer', timer => setTimer(timer));\r\n            return () => connection.off('syncTimer');\r\n        }\r\n    }, [connection])\r\n\r\n    return timer;\r\n}","import 'bootstrap/dist/css/bootstrap.min.css';\nimport React, { useEffect, useState } from 'react';\nimport socketIOClient from \"socket.io-client\";\nimport GameList from './components/game.list';\nimport { useCookies } from 'react-cookie'\nimport Game from './components/game'\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  useLocation,\n  useHistory\n} from \"react-router-dom\";\n\nexport default () => {\n  // let server = \"http://192.168.1.69:15519\"\n  let server = \"http://worddd.cloudno.de\"\n\n  const history = useHistory();\n\n  const [{ userId }, setCookie, removeCookie] = useCookies(['body-girl-animal-userId']);\n  let [usernameSaved, setUsernameSaved] = useState(false);\n  let [username, setUsername] = useState('');\n\n  let connection = useSocketConnection(server, userId, setCookie, setUsername, setUsernameSaved);\n\n  let gameId = useQuery().get('id');\n  let [gameExists, setGameExists] = useGameExists(gameId, connection);\n  let [gameStarted, setGameStarted] = useStarted(gameExists, gameId, userId, connection);\n  let [columns, setColumns] = useColumns(gameId, connection, gameExists, gameStarted);\n  let [hands, setHands] = useHands(gameId, connection, userId, gameExists, gameStarted);\n  const [users, setUsers] = useState([]);\n\n  useEffect(() => {\n    if (connection && userId && gameId && hands) {\n      connection.off('handTimeout')  \n      connection.on('handTimeout', () => {\n          connection.emit('handTimeoutClientResponse', { hands: hands, userId: userId, gameId: gameId });\n        });\n    }\n  }, [connection,userId, gameId, hands]);\n\n  useEffect(() => {\n    if (connection) {\n      connection.off('getUsersConnected')\n      connection.on('getUsersConnected', users => setUsers(users));\n      return () => connection.off('getUsersConnected');\n    }\n    \n  }, [connection])\n\n  let saveUsername = value => {\n    connection.emit('reqSaveUsername', { id: userId, name: value });\n    connection.off('getSaveUsername');\n    connection.on('getSaveUsername', success => success && setUsernameSaved(true) && setUsername(value));\n  }\n\n  return (\n    <Switch>\n\n      <Route path=\"/game\">\n        <Game connection={connection} setColumns={setColumns} setHands={setHands} saveUsername={saveUsername} usernameSaved={usernameSaved} setUsernameSaved={setUsernameSaved} username={username} columns={columns} hands={hands} gameId={gameId} history={history} gameExists={gameExists} users={users} gameStarted={gameStarted} />\n      </Route>\n\n      <Route path=\"/\">\n        <GameList connection={connection} setColumns={setColumns} setHands={setHands} saveUsername={saveUsername} usernameSaved={usernameSaved} setUsernameSaved={setUsernameSaved} username={username} gameId={gameId} history={history} users={users} gameStarted={gameStarted} />\n      </Route>\n\n    </Switch>\n  );\n}\n\nlet useGameExists = (gameId, connection) => {\n  let [gameExists, setGameExists] = useState(false);\n\n  useEffect(() => {\n    if (connection && gameId) {\n      connection.emit('reqGameExists', gameId);\n      connection.on('getGameExists', gameExists => setGameExists(gameExists));\n      return () => connection.off('getGameExists');\n    }\n  }, [connection, gameId]);\n\n  return [gameExists, setGameExists];\n}\n\nlet useColumns = (gameId, connection, gameExists, gameStarted) => {\n  let [columns, setColumns] = useState([]);\n\n  useEffect(() => {\n    if (connection && gameId && gameExists && gameStarted) {\n      connection.emit('reqColumns', gameId);\n      connection.off('getColumns');\n      connection.on('getColumns', columns => setColumns(['Character'].concat(columns.concat(['Actions', 'Total']))));\n      return () => connection.off('getColumns')\n    }\n  }, [gameId, connection, gameExists, gameStarted]);\n\n  return [columns, setColumns];\n}\n\nlet useHands = (gameId, connection, userId, gameExists, gameStarted) => {\n  let [hands, setHands] = useState([]);\n\n  useEffect(() => {\n    if (connection && gameId && gameExists && gameStarted) {\n      connection.emit('reqHands', { gameId: gameId, userId: userId });\n      connection.off('getHands');\n      connection.on('getHands', hands => setHands(hands));\n\n      return () => {\n        connection.off('handTimeout')\n        connection.off('getHands')\n      }\n    }\n  }, [gameId, connection, userId, gameExists, gameStarted]);\n\n  return [hands, setHands];\n}\n\nlet useSocketConnection = (server, userId, setCookie, setUsername, setUsernameSaved) => {\n\n  let [socket, setSocket] = useState(null);\n\n  useEffect(() => {\n    var connectionOptions = {\n      \"force new connection\": true,\n      \"reconnectionAttempts\": \"Infinity\", //avoid having user reconnect manually in order to prevent dead clients after a server restart\n      \"timeout\": 10000,                  //before connect_error and connect_timeout are emitted.\n      \"transports\": [\"websocket\"]\n    };\n    const s = socketIOClient(server, connectionOptions);\n\n    if (!userId || (Object.keys(userId).length === 0 && userId.constructor === Object)) {\n      s.emit('reqUserId');\n    } else {\n      s.emit('reqUsername', userId);\n    }\n\n    s.off('getUsername');\n    s.on('getUsername', username => {\n      setUsername(username);\n      setUsernameSaved(true);\n    });\n    s.off('getUserId');\n    s.on('getUserId', user => setCookie('userId', user.id, { maxAge: 3600 * 8 }) && setUsername(user.name))\n\n    setSocket(s);\n\n    return () => {\n      s.off('getUsername');\n      s.off('getUserId');\n    }\n\n  }, [server, userId, setCookie, setUsername, setUsernameSaved])\n\n  return socket;\n\n}\n\nconst useStarted = (gameExists, gameId, userId, connection) => {\n  let [started, setStarted] = useState(false);\n\n  useEffect(() => {\n    if (connection && gameId && gameExists && userId) {\n      connection.emit('reqGameStarted', gameId);\n      connection.off('getGameStarted');\n      connection.on('getGameStarted', res => setStarted(res))\n      return () => connection.off('getGameStarted');\n    }\n  }, [gameExists, gameId, userId, connection])\n\n  return [started, setStarted];\n}\n\nconst useQuery = () => {\n  return new URLSearchParams(useLocation().search);\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {\n    BrowserRouter as Router,\n} from \"react-router-dom\";\n \nReactDOM.render(<Router><App /></Router>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}