{"version":3,"sources":["components/navbar.gamelist.jsx","components/create.game.modal.jsx","components/game.list.jsx","components/dropdown.score.jsx","components/user.input.jsx","components/confirm.button.jsx","components/hand.jsx","components/hands.jsx","components/total.row.jsx","components/navbar.game.jsx","App.js","serviceWorker.js","index.js"],"names":["props","usernameRef","useRef","searchRef","submit","e","callback","preventDefault","stopPropagation","Navbar","className","bg","variant","Form","inline","onSubmit","saveUsername","current","value","trim","InputGroup","onChange","setUsernameSaved","Prepend","Text","id","role","aria-label","FormControl","ref","placeholder","aria-describedby","defaultValue","username","Button","onClick","disabled","usernameSaved","setSeatchText","type","useState","show","setShow","handleClose","Modal","onHide","Header","closeButton","Title","Body","Footer","games","useGames","connection","searchText","gameFilter","game","includes","name","console","log","filter","map","Card","key","border","users","user","i","length","gameId","emit","on","success","setGameId","setGames","useEffect","data","setInterval","toggle","handState","DropdownButton","onSelect","setInputScore","handId","inputIndex","as","title","Dropdown","Item","eventKey","inputRef","size","state","index","input","score","onBlur","setInputValue","button","hand","confirmHand","submitHand","handTotalScore","inputs","reduce","tot","character","j","hands","totalScore","Alert","quitGame","useColumns","columns","setColumns","concat","useHands","userId","setHands","useSocketConnection","server","setCookie","setUsername","socket","setSocket","s","socketIOClient","Object","keys","constructor","maxAge","Boolean","window","location","hostname","match","ReactDOM","render","useCookies","reload","Table","striped","bordered","hover","responsive","c","handIndex","findIndex","h","Number","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.85cf4d59.chunk.js","sourcesContent":["\r\nimport React, { useRef } from 'react';\r\nimport { Button, Navbar, Form, InputGroup, FormControl } from 'react-bootstrap';\r\n\r\nexport default props => {\r\n    let usernameRef = useRef();\r\n    let searchRef = useRef();\r\n\r\n    let submit = (e,callback) => {\r\n        e.preventDefault();\r\n        e.stopPropagation();\r\n        callback();\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Navbar className=\"bg-light justify-content-between\" bg=\"dark\" variant=\"dark\">\r\n                <Form inline onSubmit={(e) => submit(e, () => props.saveUsername(usernameRef.current.value.trim()))}>\r\n                    <InputGroup className=\"mr-sm-2\" onChange={() => props.setUsernameSaved(usernameRef.current.value.trim() === '')}>\r\n                        <InputGroup.Prepend>\r\n                            <InputGroup.Text id=\"basic-addon1\">\r\n                                <span role=\"img\" aria-label=\"user-avatar-icon\">\r\n                                    👤\r\n                                </span>\r\n                            </InputGroup.Text>\r\n                        </InputGroup.Prepend>\r\n                        <FormControl\r\n                            ref={usernameRef}\r\n                            placeholder=\"Username\"\r\n                            aria-label=\"Username\"\r\n                            aria-describedby=\"basic-addon1\"\r\n                            defaultValue={props.username}\r\n                        />\r\n                    </InputGroup>\r\n                    <Button onClick={() => props.saveUsername(usernameRef.current.value.trim())} disabled={props.usernameSaved}>Save</Button>\r\n                </Form>\r\n                <Form inline onSubmit={(e) => submit(e, () => props.setSeatchText(searchRef.current.value.trim()))}>\r\n                    <Button variant=\"success\" className=\" mr-sm-2\">Create game</Button>\r\n                    <FormControl ref={searchRef} type=\"text\" placeholder=\"Type ID or name...\" className=\" mr-sm-2\" />\r\n                    <Button onClick={() => props.setSeatchText(searchRef.current.value.trim())}>Search</Button>\r\n                </Form>\r\n            </Navbar>\r\n        </>\r\n    );\r\n}","import React, { useState } from 'react';\r\nimport { Modal, Button } from 'react-bootstrap';\r\n\r\nexport default () => {\r\n    const [show, setShow] = useState(false);\r\n\r\n    const handleClose = () => setShow(false);\r\n    const handleShow = () => setShow(true);\r\n\r\n    return (\r\n        <>\r\n            <Modal show={show} onHide={handleClose}>\r\n                <Modal.Header closeButton>\r\n                    <Modal.Title>Modal heading</Modal.Title>\r\n                </Modal.Header>\r\n                <Modal.Body>Woohoo, you're reading this text in a modal!</Modal.Body>\r\n                <Modal.Footer>\r\n                    <Button variant=\"secondary\" onClick={handleClose}>\r\n                        Close\r\n                    </Button>\r\n                    <Button variant=\"primary\" onClick={handleClose}>\r\n                        Save Changes\r\n                    </Button>\r\n                </Modal.Footer>\r\n            </Modal>\r\n        </>\r\n    );\r\n}","\r\nimport React, { useState, useEffect } from 'react';\r\nimport { Card, Button } from 'react-bootstrap';\r\nimport NavBar from './navbar.gamelist'\r\nimport CreateGameModal from './create.game.modal'\r\nexport default props => {\r\n    let games = useGames(props.connection);\r\n    let [searchText, setSeatchText] = useState('');\r\n\r\n    let joinGame = (gameId) => {\r\n        props.connection.emit('reqJoinGame', gameId);\r\n\r\n        props.connection.on('getJoinGame', success => {\r\n            success ? props.setGameId(gameId) : props.setGameId(null);\r\n        })\r\n    }\r\n\r\n    let gameFilter = (game) => game.id.includes(searchText) || game.name.includes(searchText);\r\n\r\n\r\n\r\n    console.log(games.filter(gameFilter))\r\n\r\n    return (\r\n        <>\r\n            <NavBar setSeatchText={setSeatchText} saveUsername={props.saveUsername} setUsernameSaved={props.setUsernameSaved} username={props.username} usernameSaved={props.usernameSaved}/>\r\n            <CreateGameModal/>\r\n            {\r\n                games.filter(gameFilter).map(game =>\r\n                    <Card key={game.id} border=\"primary\" className=\"m-2 game-card\" >\r\n                        <Card.Body>\r\n                            <Card.Title>{game.name}</Card.Title>\r\n                            <Card.Text>\r\n                                <br />\r\n                                <span className=\"border border-dark p-3 mt-3\">\r\n                                    {\r\n                                        game.users.map((user, i) =>\r\n                                            <span key={i}>{user.name}\r\n                                                {i !== game.users.length - 1 ? (<>, </>) : ''}\r\n                                            </span>\r\n                                        )\r\n                                    }\r\n                                </span>\r\n                                <br />\r\n                                <br />\r\n                                <span>\r\n                                    ID:\r\n                                    <span className=\"text-primary m-1\">\r\n                                        {game.id}\r\n                                    </span>\r\n                                </span>\r\n                            </Card.Text>\r\n                            <Button variant=\"primary\" onClick={() => joinGame(game.id)}>Join</Button>\r\n                        </Card.Body>\r\n                    </Card>\r\n                )\r\n            }\r\n        </>\r\n    );\r\n}\r\n\r\nlet useGames = (connection) => {\r\n    let [games, setGames] = useState([]);\r\n\r\n    useEffect(() => {\r\n        if (connection) {\r\n            connection.emit('reqGames');\r\n            connection.on('getGames', (data) => setInterval(()=>setGames(data)),10000)\r\n        }\r\n    }, [connection]);\r\n\r\n    return games;\r\n}","import React from 'react';\r\nimport { DropdownButton, InputGroup, Dropdown } from 'react-bootstrap';\r\n\r\nexport default props => {\r\n\r\n    let variant = '';\r\n    switch (props.toggle) {\r\n        case 0: variant = 'danger'; break;\r\n        case 5: variant = 'primary'; break;\r\n        case 10: variant = 'success'; break;\r\n        default: variant = 'danger'; break;\r\n    }\r\n\r\n    return (\r\n        props.handState !== 'confirmed' ?\r\n            (\r\n                <InputGroup.Prepend>\r\n                    <InputGroup.Text className={variant}>{props.toggle}</InputGroup.Text>\r\n                </InputGroup.Prepend>\r\n            )\r\n            :\r\n            (\r\n                <DropdownButton\r\n                    disabled={props.disabled} onSelect={value => props.setInputScore(value, props.handId, props.inputIndex)}\r\n                    as={InputGroup.Prepend}\r\n                    variant={variant}\r\n                    title={props.toggle}\r\n                >\r\n                    <Dropdown.Item eventKey={0}>0</Dropdown.Item>\r\n                    <Dropdown.Item eventKey={5}>5</Dropdown.Item>\r\n                    <Dropdown.Item eventKey={10}>10</Dropdown.Item>\r\n                </DropdownButton>\r\n            )\r\n    )\r\n\r\n}\r\n","import React, { useRef } from 'react';\r\nimport Score from './dropdown.score'\r\nimport { InputGroup, FormControl } from 'react-bootstrap';\r\n\r\nexport default props => {\r\n    let inputRef = useRef();\r\n    return (\r\n        <>\r\n            <td className=\"align-middle\">\r\n                <InputGroup size=\"sm\" className=\"mb-3\" >\r\n\r\n                    {\r\n                        props.state !== 'playing' ?\r\n                            (\r\n                                <Score handId={props.handId} inputIndex={props.index} toggle={props.input.score} handState={props.handState} setInputScore={props.setInputScore} />\r\n                            )\r\n                            :\r\n                            ('')\r\n                    }\r\n\r\n\r\n                    <FormControl ref={inputRef} aria-label=\"Small\" aria-describedby=\"inputGroup-sizing-sm\" disabled={props.handState !== 'playing'} defaultValue={props.input.value} onBlur={() => props.setInputValue(inputRef.current.value, props.handId, props.index)} />\r\n                </InputGroup>\r\n                \r\n            </td>\r\n        </>\r\n    );\r\n}\r\n","\r\nimport React from 'react';\r\nimport { Button } from 'react-bootstrap';\r\n\r\nexport default props => {\r\n\r\n    let button;\r\n\r\n    switch (props.hand.state) {\r\n        case 'playing':\r\n            button = (\r\n                <Button variant=\"success\" onClick={() => props.confirmHand(props.hand.id)}>\r\n                    Confirm\r\n                </Button>\r\n            )\r\n            break;\r\n\r\n        case 'waiting':\r\n            button = (\r\n                <Button variant=\"success\" onClick={() => props.confirmHand(props.hand.id)} disabled>\r\n                    Confirmed\r\n                </Button>\r\n            )\r\n            break;\r\n\r\n        case 'confirmed':\r\n            button = (\r\n                <Button variant=\"primary\" onClick={() => props.submitHand(props.hand.id)}>\r\n                    Submit\r\n                </Button>\r\n            )\r\n            break;\r\n\r\n       default:\r\n            button = (\r\n               <h6>Submitted</h6>\r\n            )\r\n            break;\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <td className=\"align-middle\">\r\n                {button}\r\n            </td>\r\n        </>\r\n    );\r\n}\r\n","import React from 'react';\r\nimport UserInput from './user.input'\r\nimport ConfirmButton from './confirm.button'\r\n\r\nexport default props => {\r\n    let handTotalScore = props.hand.inputs.reduce((tot, input) => tot + input.score, 0)\r\n\r\n    return (\r\n        <>\r\n            <td className=\"align-middle\">{props.hand.character}</td>\r\n            {\r\n                props.hand.inputs.map((input, j) =>\r\n                    <UserInput key={j} index={j} handId={props.hand.id} input={input} handState={props.hand.state} setInputScore={props.setInputScore} setInputValue={props.setInputValue} state={props.hand.state}/>\r\n                )\r\n            }\r\n            <ConfirmButton hand={props.hand} confirmHand={props.confirmHand} submitHand={props.submitHand}/>\r\n            <td className=\"align-middle\">{handTotalScore}</td>\r\n        </>\r\n    );\r\n}\r\n","\r\nimport React from 'react';\r\nimport Hand from './hand'\r\n\r\nexport default props => {\r\n\r\n    return (\r\n        <>\r\n            {\r\n                props.hands.map(\r\n                    (hand, i) =>\r\n                        <tr key={i} className=\"text-center align-middle\">\r\n                            <Hand hand={hand} setInputScore={props.setInputScore} setInputValue={props.setInputValue} confirmHand={props.confirmHand} submitHand={props.submitHand}/>\r\n                        </tr>\r\n                )\r\n            }\r\n        </>\r\n    );\r\n}\r\n","import React from 'react';\r\nimport { Alert } from 'react-bootstrap';\r\n\r\nexport default props => {\r\n\r\n    let totalScore = props.hands.reduce((tot, hand) => tot + hand.inputs.reduce((tot, input) => tot + input.score, 0), 0);\r\n\r\n    return (\r\n        <>\r\n            <footer className=\"w-100 p-1 bg-dark text-white fixed-bottom\">\r\n                <Alert variant=\"primary\" className=\"float-right m-0\">\r\n                    {totalScore}\r\n                </Alert>\r\n                <Alert variant=\"none\" className=\"float-right m-0\">\r\n                    TOTAL\r\n                </Alert>\r\n            </footer>\r\n        </>\r\n    );\r\n}\r\n","\r\nimport React from 'react';\r\nimport { Button, Navbar, Form, InputGroup, FormControl } from 'react-bootstrap';\r\n\r\nexport default props => {\r\n    return (\r\n        <>\r\n            <Navbar className=\"justify-content-between\" bg=\"dark\" variant=\"dark\">\r\n                <Form inline>\r\n                    <InputGroup className=\"mr-sm-2\" >\r\n                        <InputGroup.Prepend>\r\n                            <InputGroup.Text id=\"basic-addon1\">\r\n                                <span role=\"img\" aria-label=\"user-avatar-icon\">\r\n                                    👤\r\n                                    </span>\r\n                            </InputGroup.Text>\r\n                        </InputGroup.Prepend>\r\n                        <FormControl\r\n                            placeholder=\"Username\"\r\n                            aria-label=\"Username\"\r\n                            aria-describedby=\"basic-addon1\"\r\n                            defaultValue={props.username}\r\n                            disabled\r\n                        />\r\n                    </InputGroup>\r\n                </Form>\r\n                <Form inline>\r\n                    <Button variant=\"danger\" onClick={() => props.quitGame()}>Quit game</Button>\r\n                </Form>\r\n            </Navbar>\r\n        </>\r\n    );\r\n}","import 'bootstrap/dist/css/bootstrap.min.css';\nimport React, { useEffect, useState } from 'react';\nimport { Table, Navbar } from 'react-bootstrap';\nimport socketIOClient from \"socket.io-client\";\nimport GameList from './components/game.list';\nimport Hands from './components/hands';\nimport TotalRow from './components/total.row';\nimport { useCookies } from 'react-cookie'\nimport NavbarGame from './components/navbar.game'\n\nexport default () => {\n\n  // let server = \"http://worddd.cloudno.de\"\n  let server = \"http://localhost:15519\"\n\n\n  const [{ userId }, setCookie, removeCookie] = useCookies(['body-girl-animal-userId']);\n\n  let [usernameSaved, setUsernameSaved] = useState(false);\n  let [username, setUsername] = useState('');\n\n  let connection = useSocketConnection(server, userId, setCookie, setUsername, setUsernameSaved);\n\n  let [gameId, setGameId] = useState(null);\n  \n  let [columns, setColumns] = useColumns(gameId, connection);\n  let [hands, setHands] = useHands(gameId, connection, userId);\n\n  let quitGame = () => {\n    connection.emit('reqQuitGame');\n    connection.on('getQuitGame', () => window.location.reload(false));\n  }\n\n  let setInputScore = (value, handId, inputIndex) => {\n    let handIndex = hands.findIndex(hand => hand.id === handId)\n    let h = [...hands];\n    h[handIndex].inputs[inputIndex].score = Number(value);\n\n    setHands(h);\n  }\n\n  let setInputValue = (value, handId, inputIndex) => {\n    let handIndex = hands.findIndex(hand => hand.id === handId)\n    let h = [...hands];\n    h[handIndex].inputs[inputIndex].value = value;\n\n    setHands(h);\n  }\n\n  let confirmHand = (handId) => {\n    let handIndex = hands.findIndex(hand => hand.id === handId)\n    let h = [...hands];\n    h[handIndex].state = 'waiting';\n\n    setHands(h);\n  }\n\n  let submitHand = (handId) => {\n    let handIndex = hands.findIndex(hand => hand.id === handId)\n    let h = [...hands];\n    h[handIndex].state = 'submitted';\n\n    setHands(h);\n  }\n\n  let addHand = (newHand) => {\n    let h = [...hands];\n    h.push(newHand);\n\n    setHands(h);\n  }\n\n  let saveUsername = value => {\n    connection.emit('reqSaveUsername', { id: userId, name: value });\n    connection.on('getSaveUsername', success => success && setUsernameSaved(true) && setUsername(value));\n  }\n  return (\n    <>\n      {\n        gameId === null ?\n          (\n            <GameList connection={connection} setGameId={setGameId} setColumns={setColumns} setHands={setHands} saveUsername={saveUsername} usernameSaved={usernameSaved} setUsernameSaved={setUsernameSaved} username={username} />\n          )\n          :\n          (\n            <>\n              <NavbarGame username={username} quitGame={quitGame}/>\n              <Table striped bordered hover responsive variant=\"dark\">\n                <thead>\n                  <tr>\n                    {columns.map((c, i) => <th key={i}>{c}</th>)}\n                  </tr>\n                </thead>\n                <tbody>\n                  <Hands hands={hands} setInputScore={setInputScore} setInputValue={setInputValue} confirmHand={confirmHand} submitHand={submitHand} />\n                </tbody>\n              </Table >\n              <TotalRow columns={columns} hands={hands} />\n            </>\n          )\n      }\n    </>\n  );\n}\n\nlet useColumns = (gameId, connection) => {\n  let [columns, setColumns] = useState([]);\n\n  useEffect(() => {\n    if (connection && gameId) {\n      connection.emit('reqColumns', gameId);\n      connection.on('getColumns', columns => setColumns(columns.concat(['Actions', 'Total'])));\n    }\n  }, [gameId]);\n\n  return [columns, setColumns];\n}\n\nlet useHands = (gameId, connection, userId) => {\n  let [hands, setHands] = useState([]);\n\n  useEffect(() => {\n    if (connection && gameId) {\n      connection.emit('reqHands', { gameId: gameId, userId: userId });\n      connection.on('getHands', hands => setHands(hands));\n    }\n  }, [gameId, userId]);\n\n  return [hands, setHands];\n}\n\nlet useSocketConnection = (server, userId, setCookie, setUsername, setUsernameSaved) => {\n\n  let [socket, setSocket] = useState(null);\n\n  useEffect(() => {\n    var connectionOptions = {\n      \"force new connection\": true,\n      \"reconnectionAttempts\": \"Infinity\", //avoid having user reconnect manually in order to prevent dead clients after a server restart\n      \"timeout\": 10000,                  //before connect_error and connect_timeout are emitted.\n      \"transports\": [\"websocket\"]\n    };\n    const s = socketIOClient(server, connectionOptions);\n\n    if (!userId || (Object.keys(userId).length === 0 && userId.constructor === Object)) {\n      s.emit('reqUserId');\n      s.on('getUserId', user => setCookie('userId', user.id, { maxAge: 3600 * 8 }) && setUsername(user.name))\n    } else {\n      s.emit('reqUsername', userId);\n      s.on('getUsername', username => {\n        setUsername(username);\n        setUsernameSaved(true);\n      });\n    }\n\n    setSocket(s);\n  }, [server, userId, setCookie, setUsername, setUsernameSaved])\n\n  return socket;\n\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}