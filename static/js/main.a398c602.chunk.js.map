{"version":3,"sources":["components/navbar.gamelist.jsx","components/create.game.modal.jsx","components/game.list.jsx","components/dropdown.score.jsx","components/user.input.jsx","components/confirm.button.jsx","components/hand.jsx","components/hands.jsx","components/total.row.jsx","components/navbar.game.jsx","components/game.loading.jsx","components/game.jsx","App.js","serviceWorker.js","index.js"],"names":["props","usernameRef","useRef","searchRef","submit","e","callback","preventDefault","stopPropagation","Navbar","className","bg","variant","Form","inline","onSubmit","saveUsername","current","value","trim","InputGroup","onChange","setUsernameSaved","Prepend","Text","id","role","aria-label","FormControl","ref","placeholder","aria-describedby","defaultValue","username","Button","onClick","disabled","usernameSaved","setSeatchText","createGame","type","handleClose","connection","emit","setShow","generateField","createRef","useState","fields","setFields","gameNameRef","Modal","show","onHide","Header","closeButton","Title","Body","FormText","newGameId","map","_","i","key","Control","style","width","f","setField","length","splice","removeField","concat","ListGroup","users","user","Item","name","Footer","gameId","columns","history","push","games","useGames","searchText","showCreateGameModal","setShowCreateGameModal","setNewGameId","on","filter","game","includes","Card","border","setGames","useEffect","data","off","toggle","handState","DropdownButton","onSelect","setInputScore","handId","inputIndex","as","title","Dropdown","eventKey","inputRef","size","state","index","input","score","onBlur","setInputValue","button","hand","confirmHand","submitHand","handTotalScore","inputs","reduce","tot","console","log","character","j","hands","totalScore","Alert","scoreBoard","Popover","Content","sort","a","b","textColor","timer","OverlayTrigger","trigger","placement","overlay","Label","quitGame","Heading","Spinner","animation","useTimer","success","gameExists","gameStarted","Table","striped","bordered","hover","responsive","c","handIndex","findIndex","h","Number","setHands","setTimer","useGameExists","setGameExists","useColumns","setColumns","useHands","userId","useSocketConnection","server","setCookie","setUsername","socket","setSocket","s","socketIOClient","Object","keys","constructor","maxAge","useStarted","started","setStarted","res","useQuery","URLSearchParams","useLocation","search","Boolean","window","location","hostname","match","ReactDOM","render","useHistory","useCookies","get","setUsers","path","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.a398c602.chunk.js","sourcesContent":["\r\nimport React, { useRef } from 'react';\r\nimport { Button, Navbar, Form, InputGroup, FormControl } from 'react-bootstrap';\r\n\r\nexport default props => {\r\n    let usernameRef = useRef();\r\n    let searchRef = useRef();\r\n\r\n    const submit = (e, callback) => {\r\n        e.preventDefault();\r\n        e.stopPropagation();\r\n        if (callback) {\r\n            callback();\r\n        }\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Navbar className=\"bg-light justify-content-between\" bg=\"dark\" variant=\"dark\">\r\n                <Form inline onSubmit={(e) => submit(e, () => props.saveUsername(usernameRef.current.value.trim()))}>\r\n                    <InputGroup className=\"mr-sm-2\" onChange={() => props.setUsernameSaved(usernameRef.current.value.trim() === '')}>\r\n                        <InputGroup.Prepend>\r\n                            <InputGroup.Text id=\"basic-addon1\">\r\n                                <span role=\"img\" aria-label=\"user-avatar-icon\">\r\n                                    👤\r\n                                </span>\r\n                            </InputGroup.Text>\r\n                        </InputGroup.Prepend>\r\n                        <FormControl\r\n                            ref={usernameRef}\r\n                            placeholder=\"Username\"\r\n                            aria-label=\"Username\"\r\n                            aria-describedby=\"basic-addon1\"\r\n                            defaultValue={props.username}\r\n                        />\r\n                    </InputGroup>\r\n                    <Button onClick={() => props.saveUsername(usernameRef.current.value.trim())} disabled={props.usernameSaved}>Save</Button>\r\n                </Form>\r\n                <Form inline onSubmit={(e) => submit(e, () => props.setSeatchText(searchRef.current.value.trim()))}>\r\n                    <Button variant=\"success\" className=\" mr-sm-2\" onClick={() => props.createGame()}>Create game</Button>\r\n                    <FormControl ref={searchRef} type=\"text\" placeholder=\"Type ID or name...\" className=\" mr-sm-2\" />\r\n                    <Button onClick={() => props.setSeatchText(searchRef.current.value.trim())}>Search</Button>\r\n                </Form>\r\n            </Navbar>\r\n        </>\r\n    );\r\n}","import React, { useState, useRef, createRef, useEffect } from 'react';\r\nimport { Modal, Button, Form, FormText, FormControl, ListGroup } from 'react-bootstrap';\r\n\r\nexport default props => {\r\n    const handleClose = () => {\r\n        props.connection.emit('reqQuitGame');\r\n        props.setShow(false);\r\n    }\r\n    const handleShow = () => props.setShow(true);\r\n\r\n    const generateField = () => ({ value: '', ref: createRef() });\r\n    const [fields, setFields] = useState([generateField()]);\r\n    const gameNameRef = useRef();\r\n    \r\n    \r\n    const submit = (e, callback) => {\r\n        e.preventDefault();\r\n        e.stopPropagation();\r\n        if (callback) {\r\n            callback();\r\n        }\r\n    }\r\n\r\n    const startGame = () => {\r\n        props.connection.emit('startGame', { gameId: props.newGameId, name: gameNameRef.current.value.trim(), columns: fields.map(f => f.value)});\r\n        props.history.push(\"/game?id=\" + props.newGameId);\r\n        props.setShow(false);\r\n    }\r\n\r\n    const setField = (i, value) => {\r\n        let f = [...fields];\r\n        f[i].value = f[i].ref.current.value.trim();\r\n        setFields(f);\r\n    }\r\n\r\n    const addField = () => {\r\n        setFields([...fields].concat(generateField()));\r\n    }\r\n\r\n    const removeField = (i) => {\r\n        let f = [...fields];\r\n        f.splice(i, 1);\r\n        setFields(f);\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Modal show={props.show} onHide={handleClose}>\r\n                <Modal.Header closeButton>\r\n                    <Modal.Title>Create a game</Modal.Title>\r\n                </Modal.Header>\r\n                <Modal.Body>\r\n                    <FormText className=\"font-weight-bold\">ID</FormText>\r\n                    <FormText className=\"font-weight-bold text-danger\" variant=\"danger\">{props.newGameId}</FormText>\r\n                </Modal.Body>\r\n\r\n                <Modal.Body>\r\n                    <FormText className=\"font-weight-bold\">Name</FormText>\r\n                    <FormControl type=\"text\" placeholder=\"Game name...\" ref={gameNameRef} />\r\n                </Modal.Body>\r\n\r\n                <Modal.Body>\r\n                    <FormText className=\"font-weight-bold\">Fields</FormText>\r\n                    {\r\n                        fields.map((_, i) =>\r\n                            <Form key={i} inline className=\" mt-1\" onSubmit={(e) => submit(e)}>\r\n                                <Form.Control ref={fields[i].ref} type=\"text\" placeholder=\"Istert field...\" style={{ width: '80%' }} className=\" mr-sm-1\" onChange={() => setField(i)} value={fields[i].value} />\r\n                                {\r\n                                    fields.length > 1 ?\r\n                                        <Button variant=\"danger\" className=\" mr-sm-1\" onClick={() => removeField(i)}>-</Button>\r\n                                        : ''\r\n                                }\r\n                                {\r\n                                    i === fields.length - 1 ?\r\n                                        <Button variant=\"success\" className=\" mr-sm-1\" onClick={() => addField()}>+</Button>\r\n                                        : ''\r\n                                }\r\n                            </Form>\r\n                        )\r\n                    }\r\n                </Modal.Body>\r\n\r\n                <Modal.Body>\r\n                    <FormText className=\"font-weight-bold\">Users connected</FormText>\r\n                    <ListGroup>\r\n                        {\r\n                            props.users.map((user,i) =>\r\n                                <ListGroup.Item key={i}>{user.name}</ListGroup.Item>\r\n                            )\r\n                        }\r\n                    </ListGroup>\r\n                </Modal.Body>\r\n                <Modal.Footer>\r\n                    <Button variant=\"secondary\" onClick={handleClose}>\r\n                        Close\r\n                    </Button>\r\n                    <Button variant=\"primary\" onClick={startGame}>\r\n                        Start game\r\n                    </Button>\r\n                </Modal.Footer>\r\n            </Modal>\r\n        </>\r\n    );\r\n}","\r\nimport React, { useState, useEffect } from 'react';\r\nimport { Card, Button } from 'react-bootstrap';\r\nimport NavBar from './navbar.gamelist'\r\nimport CreateGameModal from './create.game.modal'\r\nexport default props => {\r\n    let games = useGames(props.connection);\r\n    let [searchText, setSeatchText] = useState('');\r\n    const [showCreateGameModal, setShowCreateGameModal] = useState(false);\r\n    const [newGameId, setNewGameId] = useState(null);\r\n\r\n    const createGame = () => {\r\n        props.connection.emit('reqCreateGame');\r\n        props.connection.on('getCreateGame', gameId => {\r\n            setNewGameId(gameId);\r\n            setShowCreateGameModal(true)\r\n        });\r\n    }\r\n\r\n    let joinGame = (gameId) => {\r\n        props.history.push(\"/game?id=\" + gameId);\r\n\r\n        \r\n    }\r\n\r\n    let gameFilter = (game) => game.id.includes(searchText) || game.name.includes(searchText);\r\n\r\n    return (\r\n        <>\r\n            <NavBar createGame={createGame} setSeatchText={setSeatchText} saveUsername={props.saveUsername} setUsernameSaved={props.setUsernameSaved} username={props.username} usernameSaved={props.usernameSaved} />\r\n            <CreateGameModal show={showCreateGameModal} newGameId={newGameId} setShow={setShowCreateGameModal} connection={props.connection} history={props.history} users={props.users}/>\r\n            {\r\n                games.filter(gameFilter).map(game =>\r\n                    <Card key={game.id} border=\"primary\" className=\"m-2 game-card\" >\r\n                        <Card.Body>\r\n                            <Card.Title>{game.name}</Card.Title>\r\n                            <Card.Text>\r\n                                <br />\r\n                                <span className=\"border border-dark p-3 mt-3\">\r\n                                    {\r\n                                        game.users.map((user, i) =>\r\n                                            <span key={i}>{user.name}\r\n                                                {i !== game.users.length - 1 ? (<>, </>) : ''}\r\n                                            </span>\r\n                                        )\r\n                                    }\r\n                                </span>\r\n                                <br />\r\n                                <br />\r\n                                <span>\r\n                                    ID:\r\n                                    <span className=\"text-primary m-1\">\r\n                                        {game.id}\r\n                                    </span>\r\n                                </span>\r\n                            </Card.Text>\r\n                            <Button variant=\"primary\" onClick={() => joinGame(game.id)}>Join</Button>\r\n                        </Card.Body>\r\n                    </Card>\r\n                )\r\n            }\r\n        </>\r\n    );\r\n}\r\n\r\nlet useGames = (connection) => {\r\n    let [games, setGames] = useState([]);\r\n\r\n    useEffect(() => {\r\n        if (connection) {\r\n            connection.emit('reqGames');\r\n            connection.on('getGames', (data) => setGames(data))\r\n            return () => connection.off('getGames');\r\n        }\r\n    }, [connection]);\r\n\r\n    return games;\r\n}","import React from 'react';\r\nimport { DropdownButton, InputGroup, Dropdown } from 'react-bootstrap';\r\n\r\nexport default props => {\r\n\r\n    let variant = '';\r\n    switch (props.toggle) {\r\n        case 0: variant = 'danger'; break;\r\n        case 5: variant = 'primary'; break;\r\n        case 10: variant = 'success'; break;\r\n        default: variant = 'danger'; break;\r\n    }\r\n\r\n    return (\r\n        props.handState !== 'confirmed' ?\r\n            (\r\n                <InputGroup.Prepend>\r\n                    <InputGroup.Text className={variant}>{props.toggle}</InputGroup.Text>\r\n                </InputGroup.Prepend>\r\n            )\r\n            :\r\n            (\r\n                <DropdownButton\r\n                    disabled={props.disabled} onSelect={value => props.setInputScore(value, props.handId, props.inputIndex)}\r\n                    as={InputGroup.Prepend}\r\n                    variant={variant}\r\n                    title={props.toggle}\r\n                >\r\n                    <Dropdown.Item eventKey={0}>0</Dropdown.Item>\r\n                    <Dropdown.Item eventKey={5}>5</Dropdown.Item>\r\n                    <Dropdown.Item eventKey={10}>10</Dropdown.Item>\r\n                </DropdownButton>\r\n            )\r\n    )\r\n\r\n}\r\n","import React, { useRef } from 'react';\r\nimport Score from './dropdown.score'\r\nimport { InputGroup, FormControl } from 'react-bootstrap';\r\n\r\nexport default props => {\r\n    let inputRef = useRef();\r\n    return (\r\n        <>\r\n            <td className=\"align-middle\">\r\n                <InputGroup size=\"sm\" className=\"mb-3\" >\r\n\r\n                    {\r\n                        props.state !== 'playing' ?\r\n                            (\r\n                                <Score handId={props.handId} inputIndex={props.index} toggle={props.input.score} handState={props.handState} setInputScore={props.setInputScore} />\r\n                            )\r\n                            :\r\n                            ('')\r\n                    }\r\n\r\n\r\n                    <FormControl ref={inputRef} aria-label=\"Small\" aria-describedby=\"inputGroup-sizing-sm\" disabled={props.handState !== 'playing'} defaultValue={props.input.value} onBlur={() => props.setInputValue(inputRef.current.value, props.handId, props.index)} />\r\n                </InputGroup>\r\n                \r\n            </td>\r\n        </>\r\n    );\r\n}\r\n","\r\nimport React from 'react';\r\nimport { Button } from 'react-bootstrap';\r\n\r\nexport default props => {\r\n\r\n    let button;\r\n\r\n    switch (props.hand.state) {\r\n        case 'playing':\r\n            button = (\r\n                <Button variant=\"success\" onClick={() => props.confirmHand(props.hand.id)}>\r\n                    Confirm\r\n                </Button>\r\n            )\r\n            break;\r\n\r\n        case 'waiting':\r\n            button = (\r\n                <Button variant=\"success\" onClick={() => props.confirmHand(props.hand.id)} disabled>\r\n                    Confirmed\r\n                </Button>\r\n            )\r\n            break;\r\n\r\n        case 'confirmed':\r\n            button = (\r\n                <Button variant=\"primary\" onClick={() => props.submitHand(props.hand.id)}>\r\n                    Submit\r\n                </Button>\r\n            )\r\n            break;\r\n\r\n       default:\r\n            button = (\r\n               <h6>Submitted</h6>\r\n            )\r\n            break;\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <td className=\"align-middle\">\r\n                {button}\r\n            </td>\r\n        </>\r\n    );\r\n}\r\n","import React from 'react';\r\nimport UserInput from './user.input'\r\nimport ConfirmButton from './confirm.button'\r\n\r\nexport default props => {\r\n    let handTotalScore = props.hand.inputs.reduce((tot, input) => tot + input.score, 0)\r\n\r\n    console.log(props.hand.state)\r\n\r\n    return (\r\n        <>\r\n            <td className=\"align-middle\">{props.hand.character}</td>\r\n            {\r\n                props.hand.inputs.map((input, j) =>\r\n                    <UserInput key={j} index={j} handId={props.hand.id} input={input} handState={props.hand.state} setInputScore={props.setInputScore} setInputValue={props.setInputValue} state={props.hand.state}/>\r\n                )\r\n            }\r\n            <ConfirmButton hand={props.hand} confirmHand={props.confirmHand} submitHand={props.submitHand}/>\r\n            <td className=\"align-middle\">{handTotalScore}</td>\r\n        </>\r\n    );\r\n}\r\n","\r\nimport React from 'react';\r\nimport Hand from './hand'\r\n\r\nexport default props => {\r\n\r\n    return (\r\n        <>\r\n            {\r\n                props.hands.map(\r\n                    (hand, i) =>\r\n                        <tr key={i} className=\"text-center align-middle\">\r\n                            <Hand hand={hand} setInputScore={props.setInputScore} setInputValue={props.setInputValue} confirmHand={props.confirmHand} submitHand={props.submitHand}/>\r\n                        </tr>\r\n                )\r\n            }\r\n        </>\r\n    );\r\n}\r\n","import React from 'react';\r\nimport { Alert } from 'react-bootstrap';\r\n\r\nexport default props => {\r\n\r\n    let totalScore = props.hands.reduce((tot, hand) => tot + hand.inputs.reduce((tot, input) => tot + input.score, 0), 0);\r\n\r\n    return (\r\n        <>\r\n            <footer className=\"w-100 p-1 bg-dark text-white fixed-bottom\">\r\n                <Alert variant=\"primary\" className=\"float-right m-0\">\r\n                    {totalScore}\r\n                </Alert>\r\n                <Alert variant=\"none\" className=\"float-right m-0\">\r\n                    TOTAL\r\n                </Alert>\r\n            </footer>\r\n        </>\r\n    );\r\n}\r\n","\r\nimport React from 'react';\r\nimport { Button, Navbar, Form, InputGroup, FormControl, Popover, OverlayTrigger, ListGroup } from 'react-bootstrap';\r\n\r\nexport default props => {\r\n\r\n    const sortUsersByScore = (a, b) => a.score > b.score;\r\n\r\n\r\n    const scoreBoard = (\r\n        <Popover id=\"scoreBoard\">\r\n            <Popover.Title as=\"h3\">Scoreboard</Popover.Title>\r\n            <Popover.Content>\r\n                <ListGroup variant=\"flush\">\r\n                    {\r\n                        props.users.sort(sortUsersByScore).map((user, i) => {\r\n                            let textColor = '';\r\n                            switch (i) {\r\n                                case 0: textColor = 'text-success'; break;\r\n                                case 2: textColor = 'text-danger'; break;\r\n                                case 1: textColor = 'text-warning'; break;\r\n                            }\r\n\r\n                            return (\r\n                                <ListGroup.Item key={i}>\r\n                                    <div className=\"row\">\r\n                                        <div className={\"col-xs-6 mr-2 \"}>{(i + 1)}</div>\r\n                                        <div className={\"col-xs-6 mr-2 \" + textColor}>{user.score}</div>\r\n                                        <div className=\"col-xs-6 \">{user.name}</div>\r\n                                    </div>\r\n\r\n                                </ListGroup.Item>\r\n                            )\r\n                        })\r\n                    }\r\n                </ListGroup>\r\n            </Popover.Content>\r\n        </Popover>\r\n    );\r\n\r\n    console.log(props.timer);\r\n\r\n    return (\r\n        <>\r\n            <Navbar className=\"justify-content-between\" bg=\"dark\" variant=\"dark\">\r\n                <Form inline>\r\n                    <InputGroup className=\"mr-sm-2\" >\r\n                        <InputGroup.Prepend>\r\n                            <InputGroup.Text id=\"basic-addon1\">\r\n                                <span role=\"img\" aria-label=\"user-avatar-icon\">\r\n                                    👤\r\n                                </span>\r\n                            </InputGroup.Text>\r\n                        </InputGroup.Prepend>\r\n                        <FormControl\r\n                            placeholder=\"Username\"\r\n                            aria-label=\"Username\"\r\n                            aria-describedby=\"basic-addon1\"\r\n                            defaultValue={props.username}\r\n                            disabled\r\n                        />\r\n                    </InputGroup>\r\n\r\n                    <OverlayTrigger trigger=\"click\" placement=\"bottom\" overlay={scoreBoard}>\r\n                        <Button variant=\"info\">&#9776;</Button>\r\n                    </OverlayTrigger>\r\n\r\n                </Form>\r\n                <Form inline>\r\n                    <Form.Label className=\"mr-sm-2 text-warning h4\" >{props.timer}</Form.Label>\r\n                    <Button variant=\"danger\" onClick={() => props.quitGame()}>Quit game</Button>\r\n                </Form>\r\n            </Navbar>\r\n        </>\r\n    );\r\n}","import React from 'react';\r\nimport { ListGroup, Alert, Spinner} from 'react-bootstrap';\r\n\r\nexport default props => {\r\n    return (\r\n        <>\r\n            <Alert variant=\"info\" className=\"m-3\">\r\n                <Alert.Heading>\r\n                    Game is starting ...\r\n                    <Spinner animation=\"grow\" variant=\"danger\" className=\"float-right\" />\r\n                </Alert.Heading>\r\n                <hr />\r\n                <p>\r\n                    Connected users\r\n                </p>\r\n                <ListGroup>\r\n                    {\r\n                        props.users.map((user, i) =>\r\n                            <ListGroup.Item key={i}>{user.name}</ListGroup.Item>\r\n                        )\r\n                    }\r\n                </ListGroup>\r\n            </Alert>\r\n        </>\r\n    )\r\n\r\n}\r\n","import 'bootstrap/dist/css/bootstrap.min.css';\r\nimport React, { useState, useEffect } from 'react';\r\nimport { Table, Alert, ListGroup, Spinner} from 'react-bootstrap';\r\nimport Hands from './hands';\r\nimport TotalRow from './total.row';\r\nimport NavbarGame from './navbar.game'\r\nimport LoadingGame from './game.loading'\r\n\r\nexport default props => {\r\n    let timer = useTimer(props.connection);\r\n\r\n    useEffect(() => {\r\n        if (props.connection && props.gameId) {\r\n            props.connection.emit('reqJoinGame', props.gameId);\r\n            \r\n            props.connection.on('getJoinGame', success => {\r\n                if (success) {\r\n                    props.connection.emit('reqGameStarted', props.gameId);\r\n                }\r\n            })\r\n            return () => props.connection.off('getJoinGame');\r\n        }\r\n    }, [props.connection, props.gameId])\r\n\r\n\r\n    let quitGame = () => {\r\n        props.connection.emit('reqQuitGame');\r\n        props.connection.on('getQuitGame', () => props.history.push('/'));\r\n    }\r\n\r\n    let setInputScore = (value, handId, inputIndex) => {\r\n        let handIndex = props.hands.findIndex(hand => hand.id === handId)\r\n        let h = [...props.hands];\r\n        h[handIndex].inputs[inputIndex].score = Number(value);\r\n\r\n        props.setHands(h);\r\n    }\r\n\r\n    let setInputValue = (value, handId, inputIndex) => {\r\n        let handIndex = props.hands.findIndex(hand => hand.id === handId)\r\n        let h = [...props.hands];\r\n        h[handIndex].inputs[inputIndex].value = value;\r\n\r\n        props.setHands(h);\r\n    }\r\n\r\n    let confirmHand = (handId) => {\r\n        let handIndex = props.hands.findIndex(hand => hand.id === handId)\r\n        let h = [...props.hands];\r\n        h[handIndex].state = 'waiting';\r\n\r\n        props.setHands(h);\r\n    }\r\n\r\n    let submitHand = (handId) => {\r\n        let handIndex = props.hands.findIndex(hand => hand.id === handId)\r\n        let h = [...props.hands];\r\n        h[handIndex].state = 'submitted';\r\n\r\n        props.setHands(h);\r\n    }\r\n\r\n    let addHand = (newHand) => {\r\n        let h = [...props.hands];\r\n        h.push(newHand);\r\n\r\n        props.setHands(h);\r\n    }\r\n\r\n    if (!props.gameExists) {\r\n        return (\r\n            <>\r\n                <NavbarGame username={props.username} quitGame={quitGame} users={props.users} timer={timer}/>\r\n                <Alert variant=\"danger\" className=\"m-3\">\r\n                    <Alert.Heading>ERROR 404</Alert.Heading>\r\n                    <p>\r\n                        Not found\r\n                    </p>\r\n                    <hr />\r\n                    <p className=\"mb-0\">\r\n                        This game does not exists!\r\n                    </p>\r\n                </Alert>\r\n            </>\r\n        );\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <NavbarGame username={props.username} quitGame={quitGame} users={props.users} timer={timer} />\r\n\r\n            {\r\n                props.gameStarted ? (\r\n                    <>\r\n                        <Table striped bordered hover responsive variant=\"dark\">\r\n                            <thead>\r\n                                <tr>\r\n                                    {props.columns.map((c, i) => <th key={i}>{c}</th>)}\r\n                                </tr>\r\n                            </thead>\r\n                            <tbody>\r\n                                <Hands hands={props.hands} setInputScore={setInputScore} setInputValue={setInputValue} confirmHand={confirmHand} submitHand={submitHand} />\r\n                            </tbody>\r\n                        </Table >\r\n                        <TotalRow columns={props.columns} hands={props.hands} />\r\n                    </>\r\n                )\r\n                :\r\n                (\r\n                    <LoadingGame users={props.users}/>\r\n                )\r\n            }\r\n\r\n        </>\r\n    )\r\n}\r\n\r\nconst useTimer = (connection) => {\r\n    const [timer,setTimer] = useState('sync...');\r\n\r\n    useEffect(()=> {\r\n        if(connection) {\r\n            connection.on('syncTimer', timer => setTimer(timer));\r\n            return () => connection.off('syncTimer');\r\n        }\r\n    },[connection])\r\n\r\n    return timer;\r\n}","import 'bootstrap/dist/css/bootstrap.min.css';\nimport React, { useEffect, useState } from 'react';\nimport socketIOClient from \"socket.io-client\";\nimport GameList from './components/game.list';\nimport { useCookies } from 'react-cookie'\nimport Game from './components/game'\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  useLocation,\n  useHistory\n} from \"react-router-dom\";\n\nexport default () => {\n  let server = \"http://192.168.1.69:15519\"\n  // let server = \"http://worddd.cloudno.de\"\n\n  const history = useHistory();\n\n  const [{ userId }, setCookie, removeCookie] = useCookies(['body-girl-animal-userId']);\n  let [usernameSaved, setUsernameSaved] = useState(false);\n  let [username, setUsername] = useState('');\n\n  let connection = useSocketConnection(server, userId, setCookie, setUsername, setUsernameSaved);\n\n  let gameId = useQuery().get('id');\n  let [gameExists, setGameExists] = useGameExists(gameId, connection);\n  let [gameStarted, setGameStarted] = useStarted(gameExists, gameId, userId, connection);\n  let [columns, setColumns] = useColumns(gameId, connection, gameExists, gameStarted);\n  let [hands, setHands] = useHands(gameId, connection, userId, gameExists, gameStarted);\n  const [users, setUsers] = useState([]);\n\n  useEffect(() => {\n    if (connection && userId && gameId && hands) {\n      connection.on('giveHands', () => {\n        console.log('sending...')\n        console.log(hands)\n        connection.emit('hereHands', { hands: hands, userId: userId, gameId: gameId });\n      });\n    }\n  }, [connection && userId && gameId && hands]);\n\n  useEffect(() => {\n    if (connection) {\n      connection.on('getUsersConnected', users => setUsers(users));\n      return () => connection.off('getUsersConnected');\n    }\n    \n  }, [connection])\n\n  let saveUsername = value => {\n    connection.emit('reqSaveUsername', { id: userId, name: value });\n    connection.on('getSaveUsername', success => success && setUsernameSaved(true) && setUsername(value));\n  }\n  return (\n    <Switch>\n\n      <Route path=\"/game\">\n        <Game connection={connection} setColumns={setColumns} setHands={setHands} saveUsername={saveUsername} usernameSaved={usernameSaved} setUsernameSaved={setUsernameSaved} username={username} columns={columns} hands={hands} gameId={gameId} history={history} gameId={gameId} gameExists={gameExists} users={users} gameStarted={gameStarted} />\n      </Route>\n\n      <Route path=\"/\">\n        <GameList connection={connection} setColumns={setColumns} setHands={setHands} saveUsername={saveUsername} usernameSaved={usernameSaved} setUsernameSaved={setUsernameSaved} username={username} gameId={gameId} history={history} users={users} gameStarted={gameStarted} />\n      </Route>\n\n    </Switch>\n  );\n}\n\nlet useGameExists = (gameId, connection) => {\n  let [gameExists, setGameExists] = useState(false);\n\n  useEffect(() => {\n    if (connection && gameId) {\n      connection.emit('reqGameExists', gameId);\n      connection.on('getGameExists', gameExists => setGameExists(gameExists));\n      return () => connection.off('getGameExists');\n    }\n  }, [connection, gameId]);\n\n  return [gameExists, setGameExists];\n}\n\nlet useColumns = (gameId, connection, gameExists, gameStarted) => {\n  let [columns, setColumns] = useState([]);\n\n  useEffect(() => {\n    if (connection && gameId && gameExists && gameStarted) {\n      connection.emit('reqColumns', gameId);\n      connection.on('getColumns', columns => setColumns(['Character'].concat(columns.concat(['Actions', 'Total']))));\n      return () => connection.off('getColumns')\n    }\n  }, [gameId, connection, gameExists, gameStarted]);\n\n  return [columns, setColumns];\n}\n\nlet useHands = (gameId, connection, userId, gameExists, gameStarted) => {\n  let [hands, setHands] = useState([]);\n\n  useEffect(() => {\n    if (connection && gameId && gameExists && gameStarted) {\n      connection.emit('reqHands', { gameId: gameId, userId: userId });\n      connection.on('getHands', hands => setHands(hands));\n\n      return () => {\n        connection.off('giveHands')\n        connection.off('getHands')\n      }\n    }\n  }, [gameId, connection, userId, gameExists, gameStarted]);\n\n  return [hands, setHands];\n}\n\nlet useSocketConnection = (server, userId, setCookie, setUsername, setUsernameSaved) => {\n\n  let [socket, setSocket] = useState(null);\n\n  useEffect(() => {\n    var connectionOptions = {\n      \"force new connection\": true,\n      \"reconnectionAttempts\": \"Infinity\", //avoid having user reconnect manually in order to prevent dead clients after a server restart\n      \"timeout\": 10000,                  //before connect_error and connect_timeout are emitted.\n      \"transports\": [\"websocket\"]\n    };\n    const s = socketIOClient(server, connectionOptions);\n\n    if (!userId || (Object.keys(userId).length === 0 && userId.constructor === Object)) {\n      s.emit('reqUserId');\n    } else {\n      s.emit('reqUsername', userId);\n    }\n\n    s.on('getUsername', username => {\n      setUsername(username);\n      setUsernameSaved(true);\n    });\n    s.on('getUserId', user => setCookie('userId', user.id, { maxAge: 3600 * 8 }) && setUsername(user.name))\n\n    setSocket(s);\n\n    return () => {\n      s.off('getUsername');\n      s.off('getUserId');\n    }\n\n  }, [server, userId, setCookie, setUsername, setUsernameSaved])\n\n  return socket;\n\n}\n\nconst useStarted = (gameExists, gameId, userId, connection) => {\n  let [started, setStarted] = useState(false);\n\n  useEffect(() => {\n    if (connection && gameId && gameExists && userId) {\n      connection.emit('reqGameStarted', gameId);\n      connection.on('getGameStarted', res => setStarted(res))\n      return () => connection.off('getGameStarted');\n    }\n  }, [gameExists, gameId, userId, connection])\n\n  return [started, setStarted];\n}\n\nconst useQuery = () => {\n  return new URLSearchParams(useLocation().search);\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {\n    BrowserRouter as Router,\n} from \"react-router-dom\";\n \nReactDOM.render(<Router><App /></Router>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}