{"version":3,"sources":["components/navbar.gamelist.jsx","components/create.game.modal.jsx","components/game.list.jsx","components/dropdown.score.jsx","components/user.input.jsx","components/confirm.button.jsx","components/hand.jsx","components/hands.jsx","components/total.row.jsx","components/navbar.game.jsx","components/game.jsx","App.js","serviceWorker.js","index.js"],"names":["props","usernameRef","useRef","searchRef","submit","e","callback","preventDefault","stopPropagation","Navbar","className","bg","variant","Form","inline","onSubmit","saveUsername","current","value","trim","InputGroup","onChange","setUsernameSaved","Prepend","Text","id","role","aria-label","FormControl","ref","placeholder","aria-describedby","defaultValue","username","Button","onClick","disabled","usernameSaved","setSeatchText","createGame","type","handleClose","connection","emit","setShow","generateField","createRef","useState","fields","setFields","gameNameRef","users","setUsers","useEffect","on","off","Modal","show","onHide","Header","closeButton","Title","Body","FormText","newGameId","map","_","i","key","Control","style","width","f","setField","length","splice","removeField","concat","ListGroup","user","Item","name","Footer","gameId","columns","history","push","games","useGames","searchText","showCreateGameModal","setShowCreateGameModal","setNewGameId","filter","game","includes","Card","border","success","setGames","data","toggle","handState","DropdownButton","onSelect","setInputScore","handId","inputIndex","as","title","Dropdown","eventKey","inputRef","size","state","index","input","score","onBlur","setInputValue","button","hand","confirmHand","submitHand","handTotalScore","inputs","reduce","tot","character","j","hands","totalScore","Alert","quitGame","Table","striped","bordered","hover","responsive","c","handIndex","findIndex","h","Number","setHands","useColumns","setColumns","useHands","userId","useSocketConnection","server","setCookie","setUsername","socket","setSocket","s","socketIOClient","Object","keys","constructor","maxAge","console","log","useQuery","URLSearchParams","useLocation","search","Boolean","window","location","hostname","match","ReactDOM","render","useHistory","get","useCookies","path","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.ae28beca.chunk.js","sourcesContent":["\r\nimport React, { useRef } from 'react';\r\nimport { Button, Navbar, Form, InputGroup, FormControl } from 'react-bootstrap';\r\n\r\nexport default props => {\r\n    let usernameRef = useRef();\r\n    let searchRef = useRef();\r\n\r\n    const submit = (e, callback) => {\r\n        e.preventDefault();\r\n        e.stopPropagation();\r\n        if (callback) {\r\n            callback();\r\n        }\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Navbar className=\"bg-light justify-content-between\" bg=\"dark\" variant=\"dark\">\r\n                <Form inline onSubmit={(e) => submit(e, () => props.saveUsername(usernameRef.current.value.trim()))}>\r\n                    <InputGroup className=\"mr-sm-2\" onChange={() => props.setUsernameSaved(usernameRef.current.value.trim() === '')}>\r\n                        <InputGroup.Prepend>\r\n                            <InputGroup.Text id=\"basic-addon1\">\r\n                                <span role=\"img\" aria-label=\"user-avatar-icon\">\r\n                                    👤\r\n                                </span>\r\n                            </InputGroup.Text>\r\n                        </InputGroup.Prepend>\r\n                        <FormControl\r\n                            ref={usernameRef}\r\n                            placeholder=\"Username\"\r\n                            aria-label=\"Username\"\r\n                            aria-describedby=\"basic-addon1\"\r\n                            defaultValue={props.username}\r\n                        />\r\n                    </InputGroup>\r\n                    <Button onClick={() => props.saveUsername(usernameRef.current.value.trim())} disabled={props.usernameSaved}>Save</Button>\r\n                </Form>\r\n                <Form inline onSubmit={(e) => submit(e, () => props.setSeatchText(searchRef.current.value.trim()))}>\r\n                    <Button variant=\"success\" className=\" mr-sm-2\" onClick={() => props.createGame()}>Create game</Button>\r\n                    <FormControl ref={searchRef} type=\"text\" placeholder=\"Type ID or name...\" className=\" mr-sm-2\" />\r\n                    <Button onClick={() => props.setSeatchText(searchRef.current.value.trim())}>Search</Button>\r\n                </Form>\r\n            </Navbar>\r\n        </>\r\n    );\r\n}","import React, { useState, useRef, createRef, useEffect } from 'react';\r\nimport { Modal, Button, Form, FormText, FormControl, ListGroup } from 'react-bootstrap';\r\n\r\nexport default props => {\r\n    const handleClose = () => {\r\n        props.connection.emit('reqQuitGame');\r\n        props.setShow(false);\r\n    }\r\n    const handleShow = () => props.setShow(true);\r\n\r\n    const generateField = () => ({ value: '', ref: createRef() });\r\n    const [fields, setFields] = useState([generateField()]);\r\n    const gameNameRef = useRef();\r\n    const [users, setUsers] = useState([]);\r\n\r\n    useEffect(() => {\r\n        if (props.connection) {\r\n            props.connection.on('getUsersConnected', users => setUsers(users));\r\n            return () => props.connection.off('getUsersConnected');\r\n        }\r\n    }, [props.connection])\r\n    \r\n    const submit = (e, callback) => {\r\n        e.preventDefault();\r\n        e.stopPropagation();\r\n        if (callback) {\r\n            callback();\r\n        }\r\n    }\r\n\r\n    const startGame = () => {\r\n        props.connection.emit('startGame', { gameId: props.newGameId, name: gameNameRef.current.value.trim(), columns: fields.map(f => f.value)});\r\n        props.history.push(\"/game?id=\" + props.newGameId);\r\n        props.setShow(false);\r\n    }\r\n\r\n    const setField = (i, value) => {\r\n        let f = [...fields];\r\n        f[i].value = f[i].ref.current.value.trim();\r\n        setFields(f);\r\n    }\r\n\r\n    const addField = () => {\r\n        setFields([...fields].concat(generateField()));\r\n    }\r\n\r\n    const removeField = (i) => {\r\n        let f = [...fields];\r\n        f.splice(i, 1);\r\n        setFields(f);\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Modal show={props.show} onHide={handleClose}>\r\n                <Modal.Header closeButton>\r\n                    <Modal.Title>Create a game</Modal.Title>\r\n                </Modal.Header>\r\n                <Modal.Body>\r\n                    <FormText className=\"font-weight-bold\">ID</FormText>\r\n                    <FormText className=\"font-weight-bold text-danger\" variant=\"danger\">{props.newGameId}</FormText>\r\n                </Modal.Body>\r\n\r\n                <Modal.Body>\r\n                    <FormText className=\"font-weight-bold\">Name</FormText>\r\n                    <FormControl type=\"text\" placeholder=\"Game name...\" ref={gameNameRef} />\r\n                </Modal.Body>\r\n\r\n                <Modal.Body>\r\n                    <FormText className=\"font-weight-bold\">Fields</FormText>\r\n                    {\r\n                        fields.map((_, i) =>\r\n                            <Form key={i} inline className=\" mt-1\" onSubmit={(e) => submit(e)}>\r\n                                <Form.Control ref={fields[i].ref} type=\"text\" placeholder=\"Istert field...\" style={{ width: '80%' }} className=\" mr-sm-1\" onChange={() => setField(i)} value={fields[i].value} />\r\n                                {\r\n                                    fields.length > 1 ?\r\n                                        <Button variant=\"danger\" className=\" mr-sm-1\" onClick={() => removeField(i)}>-</Button>\r\n                                        : ''\r\n                                }\r\n                                {\r\n                                    i === fields.length - 1 ?\r\n                                        <Button variant=\"success\" className=\" mr-sm-1\" onClick={() => addField()}>+</Button>\r\n                                        : ''\r\n                                }\r\n                            </Form>\r\n                        )\r\n                    }\r\n                </Modal.Body>\r\n\r\n                <Modal.Body>\r\n                    <FormText className=\"font-weight-bold\">Users connected</FormText>\r\n                    <ListGroup>\r\n                        {\r\n                            users.map((user,i) =>\r\n                                <ListGroup.Item key={i}>{user.name}</ListGroup.Item>\r\n                            )\r\n                        }\r\n                    </ListGroup>\r\n                </Modal.Body>\r\n                <Modal.Footer>\r\n                    <Button variant=\"secondary\" onClick={handleClose}>\r\n                        Close\r\n                    </Button>\r\n                    <Button variant=\"primary\" onClick={startGame}>\r\n                        Start game\r\n                    </Button>\r\n                </Modal.Footer>\r\n            </Modal>\r\n        </>\r\n    );\r\n}","\r\nimport React, { useState, useEffect } from 'react';\r\nimport { Card, Button } from 'react-bootstrap';\r\nimport NavBar from './navbar.gamelist'\r\nimport CreateGameModal from './create.game.modal'\r\nexport default props => {\r\n    let games = useGames(props.connection);\r\n    let [searchText, setSeatchText] = useState('');\r\n    const [showCreateGameModal, setShowCreateGameModal] = useState(false);\r\n    const [newGameId, setNewGameId] = useState(null);\r\n\r\n    const createGame = () => {\r\n        props.connection.emit('reqCreateGame');\r\n        props.connection.on('getCreateGame', gameId => {\r\n            setNewGameId(gameId);\r\n            setShowCreateGameModal(true)\r\n        });\r\n    }\r\n\r\n    let joinGame = (gameId) => {\r\n        props.connection.emit('reqJoinGame', gameId);\r\n\r\n        props.connection.on('getJoinGame', success => {\r\n            if (success) props.history.push(\"/game?id=\" + gameId);\r\n        })\r\n    }\r\n\r\n    let gameFilter = (game) => game.id.includes(searchText) || game.name.includes(searchText);\r\n\r\n    return (\r\n        <>\r\n            <NavBar createGame={createGame} setSeatchText={setSeatchText} saveUsername={props.saveUsername} setUsernameSaved={props.setUsernameSaved} username={props.username} usernameSaved={props.usernameSaved} />\r\n            <CreateGameModal show={showCreateGameModal} newGameId={newGameId} setShow={setShowCreateGameModal} connection={props.connection} history={props.history}/>\r\n            {\r\n                games.filter(gameFilter).map(game =>\r\n                    <Card key={game.id} border=\"primary\" className=\"m-2 game-card\" >\r\n                        <Card.Body>\r\n                            <Card.Title>{game.name}</Card.Title>\r\n                            <Card.Text>\r\n                                <br />\r\n                                <span className=\"border border-dark p-3 mt-3\">\r\n                                    {\r\n                                        game.users.map((user, i) =>\r\n                                            <span key={i}>{user.name}\r\n                                                {i !== game.users.length - 1 ? (<>, </>) : ''}\r\n                                            </span>\r\n                                        )\r\n                                    }\r\n                                </span>\r\n                                <br />\r\n                                <br />\r\n                                <span>\r\n                                    ID:\r\n                                    <span className=\"text-primary m-1\">\r\n                                        {game.id}\r\n                                    </span>\r\n                                </span>\r\n                            </Card.Text>\r\n                            <Button variant=\"primary\" onClick={() => joinGame(game.id)}>Join</Button>\r\n                        </Card.Body>\r\n                    </Card>\r\n                )\r\n            }\r\n        </>\r\n    );\r\n}\r\n\r\nlet useGames = (connection) => {\r\n    let [games, setGames] = useState([]);\r\n\r\n    useEffect(() => {\r\n        if (connection) {\r\n            connection.emit('reqGames');\r\n            connection.on('getGames', (data) => setGames(data))\r\n            return () => connection.off('getGames');\r\n        }\r\n    }, [connection]);\r\n\r\n    return games;\r\n}","import React from 'react';\r\nimport { DropdownButton, InputGroup, Dropdown } from 'react-bootstrap';\r\n\r\nexport default props => {\r\n\r\n    let variant = '';\r\n    switch (props.toggle) {\r\n        case 0: variant = 'danger'; break;\r\n        case 5: variant = 'primary'; break;\r\n        case 10: variant = 'success'; break;\r\n        default: variant = 'danger'; break;\r\n    }\r\n\r\n    return (\r\n        props.handState !== 'confirmed' ?\r\n            (\r\n                <InputGroup.Prepend>\r\n                    <InputGroup.Text className={variant}>{props.toggle}</InputGroup.Text>\r\n                </InputGroup.Prepend>\r\n            )\r\n            :\r\n            (\r\n                <DropdownButton\r\n                    disabled={props.disabled} onSelect={value => props.setInputScore(value, props.handId, props.inputIndex)}\r\n                    as={InputGroup.Prepend}\r\n                    variant={variant}\r\n                    title={props.toggle}\r\n                >\r\n                    <Dropdown.Item eventKey={0}>0</Dropdown.Item>\r\n                    <Dropdown.Item eventKey={5}>5</Dropdown.Item>\r\n                    <Dropdown.Item eventKey={10}>10</Dropdown.Item>\r\n                </DropdownButton>\r\n            )\r\n    )\r\n\r\n}\r\n","import React, { useRef } from 'react';\r\nimport Score from './dropdown.score'\r\nimport { InputGroup, FormControl } from 'react-bootstrap';\r\n\r\nexport default props => {\r\n    let inputRef = useRef();\r\n    return (\r\n        <>\r\n            <td className=\"align-middle\">\r\n                <InputGroup size=\"sm\" className=\"mb-3\" >\r\n\r\n                    {\r\n                        props.state !== 'playing' ?\r\n                            (\r\n                                <Score handId={props.handId} inputIndex={props.index} toggle={props.input.score} handState={props.handState} setInputScore={props.setInputScore} />\r\n                            )\r\n                            :\r\n                            ('')\r\n                    }\r\n\r\n\r\n                    <FormControl ref={inputRef} aria-label=\"Small\" aria-describedby=\"inputGroup-sizing-sm\" disabled={props.handState !== 'playing'} defaultValue={props.input.value} onBlur={() => props.setInputValue(inputRef.current.value, props.handId, props.index)} />\r\n                </InputGroup>\r\n                \r\n            </td>\r\n        </>\r\n    );\r\n}\r\n","\r\nimport React from 'react';\r\nimport { Button } from 'react-bootstrap';\r\n\r\nexport default props => {\r\n\r\n    let button;\r\n\r\n    switch (props.hand.state) {\r\n        case 'playing':\r\n            button = (\r\n                <Button variant=\"success\" onClick={() => props.confirmHand(props.hand.id)}>\r\n                    Confirm\r\n                </Button>\r\n            )\r\n            break;\r\n\r\n        case 'waiting':\r\n            button = (\r\n                <Button variant=\"success\" onClick={() => props.confirmHand(props.hand.id)} disabled>\r\n                    Confirmed\r\n                </Button>\r\n            )\r\n            break;\r\n\r\n        case 'confirmed':\r\n            button = (\r\n                <Button variant=\"primary\" onClick={() => props.submitHand(props.hand.id)}>\r\n                    Submit\r\n                </Button>\r\n            )\r\n            break;\r\n\r\n       default:\r\n            button = (\r\n               <h6>Submitted</h6>\r\n            )\r\n            break;\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <td className=\"align-middle\">\r\n                {button}\r\n            </td>\r\n        </>\r\n    );\r\n}\r\n","import React from 'react';\r\nimport UserInput from './user.input'\r\nimport ConfirmButton from './confirm.button'\r\n\r\nexport default props => {\r\n    let handTotalScore = props.hand.inputs.reduce((tot, input) => tot + input.score, 0)\r\n\r\n    return (\r\n        <>\r\n            <td className=\"align-middle\">{props.hand.character}</td>\r\n            {\r\n                props.hand.inputs.map((input, j) =>\r\n                    <UserInput key={j} index={j} handId={props.hand.id} input={input} handState={props.hand.state} setInputScore={props.setInputScore} setInputValue={props.setInputValue} state={props.hand.state}/>\r\n                )\r\n            }\r\n            <ConfirmButton hand={props.hand} confirmHand={props.confirmHand} submitHand={props.submitHand}/>\r\n            <td className=\"align-middle\">{handTotalScore}</td>\r\n        </>\r\n    );\r\n}\r\n","\r\nimport React from 'react';\r\nimport Hand from './hand'\r\n\r\nexport default props => {\r\n\r\n    return (\r\n        <>\r\n            {\r\n                props.hands.map(\r\n                    (hand, i) =>\r\n                        <tr key={i} className=\"text-center align-middle\">\r\n                            <Hand hand={hand} setInputScore={props.setInputScore} setInputValue={props.setInputValue} confirmHand={props.confirmHand} submitHand={props.submitHand}/>\r\n                        </tr>\r\n                )\r\n            }\r\n        </>\r\n    );\r\n}\r\n","import React from 'react';\r\nimport { Alert } from 'react-bootstrap';\r\n\r\nexport default props => {\r\n\r\n    let totalScore = props.hands.reduce((tot, hand) => tot + hand.inputs.reduce((tot, input) => tot + input.score, 0), 0);\r\n\r\n    return (\r\n        <>\r\n            <footer className=\"w-100 p-1 bg-dark text-white fixed-bottom\">\r\n                <Alert variant=\"primary\" className=\"float-right m-0\">\r\n                    {totalScore}\r\n                </Alert>\r\n                <Alert variant=\"none\" className=\"float-right m-0\">\r\n                    TOTAL\r\n                </Alert>\r\n            </footer>\r\n        </>\r\n    );\r\n}\r\n","\r\nimport React from 'react';\r\nimport { Button, Navbar, Form, InputGroup, FormControl } from 'react-bootstrap';\r\n\r\nexport default props => {\r\n    return (\r\n        <>\r\n            <Navbar className=\"justify-content-between\" bg=\"dark\" variant=\"dark\">\r\n                <Form inline>\r\n                    <InputGroup className=\"mr-sm-2\" >\r\n                        <InputGroup.Prepend>\r\n                            <InputGroup.Text id=\"basic-addon1\">\r\n                                <span role=\"img\" aria-label=\"user-avatar-icon\">\r\n                                    👤\r\n                                    </span>\r\n                            </InputGroup.Text>\r\n                        </InputGroup.Prepend>\r\n                        <FormControl\r\n                            placeholder=\"Username\"\r\n                            aria-label=\"Username\"\r\n                            aria-describedby=\"basic-addon1\"\r\n                            defaultValue={props.username}\r\n                            disabled\r\n                        />\r\n                    </InputGroup>\r\n                </Form>\r\n                <Form inline>\r\n                    <Button variant=\"danger\" onClick={() => props.quitGame()}>Quit game</Button>\r\n                </Form>\r\n            </Navbar>\r\n        </>\r\n    );\r\n}","import 'bootstrap/dist/css/bootstrap.min.css';\r\nimport React from 'react';\r\nimport { Table } from 'react-bootstrap';\r\nimport Hands from './hands';\r\nimport TotalRow from './total.row';\r\nimport NavbarGame from './navbar.game'\r\n\r\nexport default props => {\r\n\r\n    let quitGame = () => {\r\n        props.connection.emit('reqQuitGame');\r\n        props.connection.on('getQuitGame', () => props.history.push('/'));\r\n    }\r\n\r\n    let setInputScore = (value, handId, inputIndex) => {\r\n        let handIndex = props.hands.findIndex(hand => hand.id === handId)\r\n        let h = [...props.hands];\r\n        h[handIndex].inputs[inputIndex].score = Number(value);\r\n\r\n        props.setHands(h);\r\n    }\r\n\r\n    let setInputValue = (value, handId, inputIndex) => {\r\n        let handIndex = props.hands.findIndex(hand => hand.id === handId)\r\n        let h = [...props.hands];\r\n        h[handIndex].inputs[inputIndex].value = value;\r\n\r\n        props.setHands(h);\r\n    }\r\n\r\n    let confirmHand = (handId) => {\r\n        let handIndex = props.hands.findIndex(hand => hand.id === handId)\r\n        let h = [...props.hands];\r\n        h[handIndex].state = 'waiting';\r\n\r\n        props.setHands(h);\r\n    }\r\n\r\n    let submitHand = (handId) => {\r\n        let handIndex = props.hands.findIndex(hand => hand.id === handId)\r\n        let h = [...props.hands];\r\n        h[handIndex].state = 'submitted';\r\n\r\n        props.setHands(h);\r\n    }\r\n\r\n    let addHand = (newHand) => {\r\n        let h = [...props.hands];\r\n        h.push(newHand);\r\n\r\n        props.setHands(h);\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <NavbarGame username={props.username} quitGame={quitGame} />\r\n            <Table striped bordered hover responsive variant=\"dark\">\r\n                <thead>\r\n                    <tr>\r\n                        {props.columns.map((c, i) => <th key={i}>{c}</th>)}\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                    <Hands hands={props.hands} setInputScore={setInputScore} setInputValue={setInputValue} confirmHand={confirmHand} submitHand={submitHand} />\r\n                </tbody>\r\n            </Table >\r\n            <TotalRow columns={props.columns} hands={props.hands} />\r\n        </>\r\n    )\r\n}","import 'bootstrap/dist/css/bootstrap.min.css';\nimport React, { useEffect, useState } from 'react';\nimport socketIOClient from \"socket.io-client\";\nimport GameList from './components/game.list';\nimport { useCookies } from 'react-cookie'\nimport Game from './components/game'\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  useLocation,\n  useHistory\n} from \"react-router-dom\";\n\nexport default () => {\n  const history = useHistory();\n\n  let gameId = useQuery().get('id');\n\n  console.log('gameId: ' + gameId);\n\n  // let server = \"http://localhost:15519\"\n  let server = \"http://worddd.cloudno.de\"\n\n  const [{ userId }, setCookie, removeCookie] = useCookies(['body-girl-animal-userId']);\n\n  let [usernameSaved, setUsernameSaved] = useState(false);\n  let [username, setUsername] = useState('');\n\n  let connection = useSocketConnection(server, userId, setCookie, setUsername, setUsernameSaved);\n\n  // let [gameId, setGameId] = useState(null);\n  let [columns, setColumns] = useColumns(gameId, connection);\n  let [hands, setHands] = useHands(gameId, connection, userId);\n\n\n\n  let saveUsername = value => {\n    connection.emit('reqSaveUsername', { id: userId, name: value });\n    connection.on('getSaveUsername', success => success && setUsernameSaved(true) && setUsername(value));\n  }\n  return (\n    <Switch>\n\n      <Route path=\"/game\">\n        <Game connection={connection} setColumns={setColumns} setHands={setHands} saveUsername={saveUsername} usernameSaved={usernameSaved} setUsernameSaved={setUsernameSaved} username={username} columns={columns} hands={hands} gameId={gameId} history={history} />\n      </Route>\n\n      <Route path=\"/\">\n        <GameList connection={connection} setColumns={setColumns} setHands={setHands} saveUsername={saveUsername} usernameSaved={usernameSaved} setUsernameSaved={setUsernameSaved} username={username} gameId={gameId} history={history} />\n      </Route>\n\n    </Switch>\n  );\n}\n\nlet useColumns = (gameId, connection) => {\n  let [columns, setColumns] = useState([]);\n\n  useEffect(() => {\n    if (connection && gameId) {\n      connection.emit('reqColumns', gameId);\n      connection.on('getColumns', columns => setColumns(columns.concat(['Actions', 'Total'])));\n      return () => connection.off('getColumns')\n    }\n  }, [gameId]);\n\n  return [columns, setColumns];\n}\n\nlet useHands = (gameId, connection, userId) => {\n  let [hands, setHands] = useState([]);\n\n  useEffect(() => {\n    if (connection && gameId) {\n      connection.emit('reqHands', { gameId: gameId, userId: userId });\n      connection.on('getHands', hands => setHands(hands));\n      return () => connection.off('getHands')\n    }\n  }, [gameId, userId]);\n\n  return [hands, setHands];\n}\n\nlet useSocketConnection = (server, userId, setCookie, setUsername, setUsernameSaved) => {\n\n  let [socket, setSocket] = useState(null);\n\n  useEffect(() => {\n    var connectionOptions = {\n      \"force new connection\": true,\n      \"reconnectionAttempts\": \"Infinity\", //avoid having user reconnect manually in order to prevent dead clients after a server restart\n      \"timeout\": 10000,                  //before connect_error and connect_timeout are emitted.\n      \"transports\": [\"websocket\"]\n    };\n    const s = socketIOClient(server, connectionOptions);\n\n    if (!userId || (Object.keys(userId).length === 0 && userId.constructor === Object)) {\n      s.emit('reqUserId');\n    } else {\n      s.emit('reqUsername', userId);\n    }\n\n    s.on('getUsername', username => {\n      setUsername(username);\n      setUsernameSaved(true);\n    });\n    s.on('getUserId', user => setCookie('userId', user.id, { maxAge: 3600 * 8 }) && setUsername(user.name))\n\n    console.log('SOCKET ID: ' + s.id)\n    setSocket(s);\n\n    return () => {\n      s.off('getUsername');\n      s.off('getUserId');\n    }\n\n  }, [server, userId, setCookie, setUsername, setUsernameSaved])\n\n  return socket;\n\n}\n\nconst useQuery = () => {\n  return new URLSearchParams(useLocation().search);\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {\n    BrowserRouter as Router,\n} from \"react-router-dom\";\n \nReactDOM.render(<Router><App /></Router>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}